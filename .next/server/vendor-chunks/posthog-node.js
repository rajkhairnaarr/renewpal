"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/posthog-node";
exports.ids = ["vendor-chunks/posthog-node"];
exports.modules = {

/***/ "(ssr)/./node_modules/posthog-node/lib/node/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/posthog-node/lib/node/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHog: () => (/* binding */ PostHog),\n/* harmony export */   PostHogSentryIntegration: () => (/* binding */ PostHogSentryIntegration),\n/* harmony export */   createEventProcessor: () => (/* binding */ createEventProcessor),\n/* harmony export */   sentryIntegration: () => (/* binding */ sentryIntegration),\n/* harmony export */   setupExpressErrorHandler: () => (/* binding */ setupExpressErrorHandler)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_readline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:readline */ \"node:readline\");\n\n\n\n\n/**\r\n * @file Adapted from [posthog-js](https://github.com/PostHog/posthog-js/blob/8157df935a4d0e71d2fefef7127aa85ee51c82d1/src/extensions/sentry-integration.ts) with modifications for the Node SDK.\r\n */\n/**\r\n * Integrate Sentry with PostHog. This will add a direct link to the person in Sentry, and an $exception event in PostHog.\r\n *\r\n * ### Usage\r\n *\r\n *     Sentry.init({\r\n *          dsn: 'https://example',\r\n *          integrations: [\r\n *              new PostHogSentryIntegration(posthog)\r\n *          ]\r\n *     })\r\n *\r\n *     Sentry.setTag(PostHogSentryIntegration.POSTHOG_ID_TAG, 'some distinct id');\r\n *\r\n * @param {Object} [posthog] The posthog object\r\n * @param {string} [organization] Optional: The Sentry organization, used to send a direct link from PostHog to Sentry\r\n * @param {Number} [projectId] Optional: The Sentry project id, used to send a direct link from PostHog to Sentry\r\n * @param {string} [prefix] Optional: Url of a self-hosted sentry instance (default: https://sentry.io/organizations/)\r\n * @param {SeverityLevel[] | '*'} [severityAllowList] Optional: send events matching the provided levels. Use '*' to send all events (default: ['error'])\r\n */\nconst NAME = 'posthog-node';\nfunction createEventProcessor(_posthog, {\n  organization,\n  projectId,\n  prefix,\n  severityAllowList = ['error']\n} = {}) {\n  return event => {\n    const shouldProcessLevel = severityAllowList === '*' || severityAllowList.includes(event.level);\n    if (!shouldProcessLevel) {\n      return event;\n    }\n    if (!event.tags) {\n      event.tags = {};\n    }\n    // Get the PostHog user ID from a specific tag, which users can set on their Sentry scope as they need.\n    const userId = event.tags[PostHogSentryIntegration.POSTHOG_ID_TAG];\n    if (userId === undefined) {\n      // If we can't find a user ID, don't bother linking the event. We won't be able to send anything meaningful to PostHog without it.\n      return event;\n    }\n    const uiHost = _posthog.options.host ?? 'https://us.i.posthog.com';\n    const personUrl = new URL(`/project/${_posthog.apiKey}/person/${userId}`, uiHost).toString();\n    event.tags['PostHog Person URL'] = personUrl;\n    const exceptions = event.exception?.values || [];\n    const exceptionList = exceptions.map(exception => ({\n      ...exception,\n      stacktrace: exception.stacktrace ? {\n        ...exception.stacktrace,\n        type: 'raw',\n        frames: (exception.stacktrace.frames || []).map(frame => {\n          return {\n            ...frame,\n            platform: 'node:javascript'\n          };\n        })\n      } : undefined\n    }));\n    const properties = {\n      // PostHog Exception Properties,\n      $exception_message: exceptions[0]?.value || event.message,\n      $exception_type: exceptions[0]?.type,\n      $exception_personURL: personUrl,\n      $exception_level: event.level,\n      $exception_list: exceptionList,\n      // Sentry Exception Properties\n      $sentry_event_id: event.event_id,\n      $sentry_exception: event.exception,\n      $sentry_exception_message: exceptions[0]?.value || event.message,\n      $sentry_exception_type: exceptions[0]?.type,\n      $sentry_tags: event.tags\n    };\n    if (organization && projectId) {\n      properties['$sentry_url'] = (prefix || 'https://sentry.io/organizations/') + organization + '/issues/?project=' + projectId + '&query=' + event.event_id;\n    }\n    _posthog.capture({\n      event: '$exception',\n      distinctId: userId,\n      properties\n    });\n    return event;\n  };\n}\n// V8 integration - function based\nfunction sentryIntegration(_posthog, options) {\n  const processor = createEventProcessor(_posthog, options);\n  return {\n    name: NAME,\n    processEvent(event) {\n      return processor(event);\n    }\n  };\n}\n// V7 integration - class based\nclass PostHogSentryIntegration {\n  constructor(_posthog, organization, prefix, severityAllowList) {\n    this.name = NAME;\n    // setupOnce gets called by Sentry when it intializes the plugin\n    this.name = NAME;\n    this.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n      const projectId = getCurrentHub()?.getClient()?.getDsn()?.projectId;\n      addGlobalEventProcessor(createEventProcessor(_posthog, {\n        organization,\n        projectId,\n        prefix,\n        severityAllowList\n      }));\n    };\n  }\n}\nPostHogSentryIntegration.POSTHOG_ID_TAG = 'posthog_distinct_id';\n\n// vendor from: https://github.com/LiosK/uuidv7/blob/f30b7a7faff73afbce0b27a46c638310f96912ba/src/index.ts\r\n// https://github.com/LiosK/uuidv7#license\r\n/**\r\n * uuidv7: An experimental implementation of the proposed UUID Version 7\r\n *\r\n * @license Apache-2.0\r\n * @copyright 2021-2023 LiosK\r\n * @packageDocumentation\r\n */\r\nconst DIGITS = \"0123456789abcdef\";\r\n/** Represents a UUID as a 16-byte byte array. */\r\nclass UUID {\r\n    /** @param bytes - The 16-byte byte array representation. */\r\n    constructor(bytes) {\r\n        this.bytes = bytes;\r\n    }\r\n    /**\r\n     * Creates an object from the internal representation, a 16-byte byte array\r\n     * containing the binary UUID representation in the big-endian byte order.\r\n     *\r\n     * This method does NOT shallow-copy the argument, and thus the created object\r\n     * holds the reference to the underlying buffer.\r\n     *\r\n     * @throws TypeError if the length of the argument is not 16.\r\n     */\r\n    static ofInner(bytes) {\r\n        if (bytes.length !== 16) {\r\n            throw new TypeError(\"not 128-bit length\");\r\n        }\r\n        else {\r\n            return new UUID(bytes);\r\n        }\r\n    }\r\n    /**\r\n     * Builds a byte array from UUIDv7 field values.\r\n     *\r\n     * @param unixTsMs - A 48-bit `unix_ts_ms` field value.\r\n     * @param randA - A 12-bit `rand_a` field value.\r\n     * @param randBHi - The higher 30 bits of 62-bit `rand_b` field value.\r\n     * @param randBLo - The lower 32 bits of 62-bit `rand_b` field value.\r\n     * @throws RangeError if any field value is out of the specified range.\r\n     */\r\n    static fromFieldsV7(unixTsMs, randA, randBHi, randBLo) {\r\n        if (!Number.isInteger(unixTsMs) ||\r\n            !Number.isInteger(randA) ||\r\n            !Number.isInteger(randBHi) ||\r\n            !Number.isInteger(randBLo) ||\r\n            unixTsMs < 0 ||\r\n            randA < 0 ||\r\n            randBHi < 0 ||\r\n            randBLo < 0 ||\r\n            unixTsMs > 281474976710655 ||\r\n            randA > 0xfff ||\r\n            randBHi > 1073741823 ||\r\n            randBLo > 4294967295) {\r\n            throw new RangeError(\"invalid field value\");\r\n        }\r\n        const bytes = new Uint8Array(16);\r\n        bytes[0] = unixTsMs / 2 ** 40;\r\n        bytes[1] = unixTsMs / 2 ** 32;\r\n        bytes[2] = unixTsMs / 2 ** 24;\r\n        bytes[3] = unixTsMs / 2 ** 16;\r\n        bytes[4] = unixTsMs / 2 ** 8;\r\n        bytes[5] = unixTsMs;\r\n        bytes[6] = 0x70 | (randA >>> 8);\r\n        bytes[7] = randA;\r\n        bytes[8] = 0x80 | (randBHi >>> 24);\r\n        bytes[9] = randBHi >>> 16;\r\n        bytes[10] = randBHi >>> 8;\r\n        bytes[11] = randBHi;\r\n        bytes[12] = randBLo >>> 24;\r\n        bytes[13] = randBLo >>> 16;\r\n        bytes[14] = randBLo >>> 8;\r\n        bytes[15] = randBLo;\r\n        return new UUID(bytes);\r\n    }\r\n    /**\r\n     * Builds a byte array from a string representation.\r\n     *\r\n     * This method accepts the following formats:\r\n     *\r\n     * - 32-digit hexadecimal format without hyphens: `0189dcd553117d408db09496a2eef37b`\r\n     * - 8-4-4-4-12 hyphenated format: `0189dcd5-5311-7d40-8db0-9496a2eef37b`\r\n     * - Hyphenated format with surrounding braces: `{0189dcd5-5311-7d40-8db0-9496a2eef37b}`\r\n     * - RFC 4122 URN format: `urn:uuid:0189dcd5-5311-7d40-8db0-9496a2eef37b`\r\n     *\r\n     * Leading and trailing whitespaces represents an error.\r\n     *\r\n     * @throws SyntaxError if the argument could not parse as a valid UUID string.\r\n     */\r\n    static parse(uuid) {\r\n        let hex = undefined;\r\n        switch (uuid.length) {\r\n            case 32:\r\n                hex = /^[0-9a-f]{32}$/i.exec(uuid)?.[0];\r\n                break;\r\n            case 36:\r\n                hex =\r\n                    /^([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i\r\n                        .exec(uuid)\r\n                        ?.slice(1, 6)\r\n                        .join(\"\");\r\n                break;\r\n            case 38:\r\n                hex =\r\n                    /^\\{([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})\\}$/i\r\n                        .exec(uuid)\r\n                        ?.slice(1, 6)\r\n                        .join(\"\");\r\n                break;\r\n            case 45:\r\n                hex =\r\n                    /^urn:uuid:([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{12})$/i\r\n                        .exec(uuid)\r\n                        ?.slice(1, 6)\r\n                        .join(\"\");\r\n                break;\r\n        }\r\n        if (hex) {\r\n            const inner = new Uint8Array(16);\r\n            for (let i = 0; i < 16; i += 4) {\r\n                const n = parseInt(hex.substring(2 * i, 2 * i + 8), 16);\r\n                inner[i + 0] = n >>> 24;\r\n                inner[i + 1] = n >>> 16;\r\n                inner[i + 2] = n >>> 8;\r\n                inner[i + 3] = n;\r\n            }\r\n            return new UUID(inner);\r\n        }\r\n        else {\r\n            throw new SyntaxError(\"could not parse UUID string\");\r\n        }\r\n    }\r\n    /**\r\n     * @returns The 8-4-4-4-12 canonical hexadecimal string representation\r\n     * (`0189dcd5-5311-7d40-8db0-9496a2eef37b`).\r\n     */\r\n    toString() {\r\n        let text = \"\";\r\n        for (let i = 0; i < this.bytes.length; i++) {\r\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\r\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\r\n            if (i === 3 || i === 5 || i === 7 || i === 9) {\r\n                text += \"-\";\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * @returns The 32-digit hexadecimal representation without hyphens\r\n     * (`0189dcd553117d408db09496a2eef37b`).\r\n     */\r\n    toHex() {\r\n        let text = \"\";\r\n        for (let i = 0; i < this.bytes.length; i++) {\r\n            text += DIGITS.charAt(this.bytes[i] >>> 4);\r\n            text += DIGITS.charAt(this.bytes[i] & 0xf);\r\n        }\r\n        return text;\r\n    }\r\n    /** @returns The 8-4-4-4-12 canonical hexadecimal string representation. */\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    /**\r\n     * Reports the variant field value of the UUID or, if appropriate, \"NIL\" or\r\n     * \"MAX\".\r\n     *\r\n     * For convenience, this method reports \"NIL\" or \"MAX\" if `this` represents\r\n     * the Nil or Max UUID, although the Nil and Max UUIDs are technically\r\n     * subsumed under the variants `0b0` and `0b111`, respectively.\r\n     */\r\n    getVariant() {\r\n        const n = this.bytes[8] >>> 4;\r\n        if (n < 0) {\r\n            throw new Error(\"unreachable\");\r\n        }\r\n        else if (n <= 0b0111) {\r\n            return this.bytes.every((e) => e === 0) ? \"NIL\" : \"VAR_0\";\r\n        }\r\n        else if (n <= 0b1011) {\r\n            return \"VAR_10\";\r\n        }\r\n        else if (n <= 0b1101) {\r\n            return \"VAR_110\";\r\n        }\r\n        else if (n <= 0b1111) {\r\n            return this.bytes.every((e) => e === 0xff) ? \"MAX\" : \"VAR_RESERVED\";\r\n        }\r\n        else {\r\n            throw new Error(\"unreachable\");\r\n        }\r\n    }\r\n    /**\r\n     * Returns the version field value of the UUID or `undefined` if the UUID does\r\n     * not have the variant field value of `0b10`.\r\n     */\r\n    getVersion() {\r\n        return this.getVariant() === \"VAR_10\" ? this.bytes[6] >>> 4 : undefined;\r\n    }\r\n    /** Creates an object from `this`. */\r\n    clone() {\r\n        return new UUID(this.bytes.slice(0));\r\n    }\r\n    /** Returns true if `this` is equivalent to `other`. */\r\n    equals(other) {\r\n        return this.compareTo(other) === 0;\r\n    }\r\n    /**\r\n     * Returns a negative integer, zero, or positive integer if `this` is less\r\n     * than, equal to, or greater than `other`, respectively.\r\n     */\r\n    compareTo(other) {\r\n        for (let i = 0; i < 16; i++) {\r\n            const diff = this.bytes[i] - other.bytes[i];\r\n            if (diff !== 0) {\r\n                return Math.sign(diff);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n/**\r\n * Encapsulates the monotonic counter state.\r\n *\r\n * This class provides APIs to utilize a separate counter state from that of the\r\n * global generator used by {@link uuidv7} and {@link uuidv7obj}. In addition to\r\n * the default {@link generate} method, this class has {@link generateOrAbort}\r\n * that is useful to absolutely guarantee the monotonically increasing order of\r\n * generated UUIDs. See their respective documentation for details.\r\n */\r\nclass V7Generator {\r\n    /**\r\n     * Creates a generator object with the default random number generator, or\r\n     * with the specified one if passed as an argument. The specified random\r\n     * number generator should be cryptographically strong and securely seeded.\r\n     */\r\n    constructor(randomNumberGenerator) {\r\n        this.timestamp = 0;\r\n        this.counter = 0;\r\n        this.random = randomNumberGenerator ?? getDefaultRandom();\r\n    }\r\n    /**\r\n     * Generates a new UUIDv7 object from the current timestamp, or resets the\r\n     * generator upon significant timestamp rollback.\r\n     *\r\n     * This method returns a monotonically increasing UUID by reusing the previous\r\n     * timestamp even if the up-to-date timestamp is smaller than the immediately\r\n     * preceding UUID's. However, when such a clock rollback is considered\r\n     * significant (i.e., by more than ten seconds), this method resets the\r\n     * generator and returns a new UUID based on the given timestamp, breaking the\r\n     * increasing order of UUIDs.\r\n     *\r\n     * See {@link generateOrAbort} for the other mode of generation and\r\n     * {@link generateOrResetCore} for the low-level primitive.\r\n     */\r\n    generate() {\r\n        return this.generateOrResetCore(Date.now(), 10000);\r\n    }\r\n    /**\r\n     * Generates a new UUIDv7 object from the current timestamp, or returns\r\n     * `undefined` upon significant timestamp rollback.\r\n     *\r\n     * This method returns a monotonically increasing UUID by reusing the previous\r\n     * timestamp even if the up-to-date timestamp is smaller than the immediately\r\n     * preceding UUID's. However, when such a clock rollback is considered\r\n     * significant (i.e., by more than ten seconds), this method aborts and\r\n     * returns `undefined` immediately.\r\n     *\r\n     * See {@link generate} for the other mode of generation and\r\n     * {@link generateOrAbortCore} for the low-level primitive.\r\n     */\r\n    generateOrAbort() {\r\n        return this.generateOrAbortCore(Date.now(), 10000);\r\n    }\r\n    /**\r\n     * Generates a new UUIDv7 object from the `unixTsMs` passed, or resets the\r\n     * generator upon significant timestamp rollback.\r\n     *\r\n     * This method is equivalent to {@link generate} except that it takes a custom\r\n     * timestamp and clock rollback allowance.\r\n     *\r\n     * @param rollbackAllowance - The amount of `unixTsMs` rollback that is\r\n     * considered significant. A suggested value is `10_000` (milliseconds).\r\n     * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.\r\n     */\r\n    generateOrResetCore(unixTsMs, rollbackAllowance) {\r\n        let value = this.generateOrAbortCore(unixTsMs, rollbackAllowance);\r\n        if (value === undefined) {\r\n            // reset state and resume\r\n            this.timestamp = 0;\r\n            value = this.generateOrAbortCore(unixTsMs, rollbackAllowance);\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * Generates a new UUIDv7 object from the `unixTsMs` passed, or returns\r\n     * `undefined` upon significant timestamp rollback.\r\n     *\r\n     * This method is equivalent to {@link generateOrAbort} except that it takes a\r\n     * custom timestamp and clock rollback allowance.\r\n     *\r\n     * @param rollbackAllowance - The amount of `unixTsMs` rollback that is\r\n     * considered significant. A suggested value is `10_000` (milliseconds).\r\n     * @throws RangeError if `unixTsMs` is not a 48-bit positive integer.\r\n     */\r\n    generateOrAbortCore(unixTsMs, rollbackAllowance) {\r\n        const MAX_COUNTER = 4398046511103;\r\n        if (!Number.isInteger(unixTsMs) ||\r\n            unixTsMs < 1 ||\r\n            unixTsMs > 281474976710655) {\r\n            throw new RangeError(\"`unixTsMs` must be a 48-bit positive integer\");\r\n        }\r\n        else if (rollbackAllowance < 0 || rollbackAllowance > 281474976710655) {\r\n            throw new RangeError(\"`rollbackAllowance` out of reasonable range\");\r\n        }\r\n        if (unixTsMs > this.timestamp) {\r\n            this.timestamp = unixTsMs;\r\n            this.resetCounter();\r\n        }\r\n        else if (unixTsMs + rollbackAllowance >= this.timestamp) {\r\n            // go on with previous timestamp if new one is not much smaller\r\n            this.counter++;\r\n            if (this.counter > MAX_COUNTER) {\r\n                // increment timestamp at counter overflow\r\n                this.timestamp++;\r\n                this.resetCounter();\r\n            }\r\n        }\r\n        else {\r\n            // abort if clock went backwards to unbearable extent\r\n            return undefined;\r\n        }\r\n        return UUID.fromFieldsV7(this.timestamp, Math.trunc(this.counter / 2 ** 30), this.counter & (2 ** 30 - 1), this.random.nextUint32());\r\n    }\r\n    /** Initializes the counter at a 42-bit random integer. */\r\n    resetCounter() {\r\n        this.counter =\r\n            this.random.nextUint32() * 0x400 + (this.random.nextUint32() & 0x3ff);\r\n    }\r\n    /**\r\n     * Generates a new UUIDv4 object utilizing the random number generator inside.\r\n     *\r\n     * @internal\r\n     */\r\n    generateV4() {\r\n        const bytes = new Uint8Array(Uint32Array.of(this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32(), this.random.nextUint32()).buffer);\r\n        bytes[6] = 0x40 | (bytes[6] >>> 4);\r\n        bytes[8] = 0x80 | (bytes[8] >>> 2);\r\n        return UUID.ofInner(bytes);\r\n    }\r\n}\r\n/** A global flag to force use of cryptographically strong RNG. */\r\n// declare const UUIDV7_DENY_WEAK_RNG: boolean;\r\n/** Returns the default random number generator available in the environment. */\r\nconst getDefaultRandom = () => {\r\n    // fix: crypto isn't available in react-native, always use Math.random\r\n    //   // detect Web Crypto API\r\n    //   if (\r\n    //     typeof crypto !== \"undefined\" &&\r\n    //     typeof crypto.getRandomValues !== \"undefined\"\r\n    //   ) {\r\n    //     return new BufferedCryptoRandom();\r\n    //   } else {\r\n    //     // fall back on Math.random() unless the flag is set to true\r\n    //     if (typeof UUIDV7_DENY_WEAK_RNG !== \"undefined\" && UUIDV7_DENY_WEAK_RNG) {\r\n    //       throw new Error(\"no cryptographically strong RNG available\");\r\n    //     }\r\n    //     return {\r\n    //       nextUint32: (): number =>\r\n    //         Math.trunc(Math.random() * 0x1_0000) * 0x1_0000 +\r\n    //         Math.trunc(Math.random() * 0x1_0000),\r\n    //     };\r\n    //   }\r\n    return {\r\n        nextUint32: () => Math.trunc(Math.random() * 65536) * 65536 +\r\n            Math.trunc(Math.random() * 65536),\r\n    };\r\n};\r\n// /**\r\n//  * Wraps `crypto.getRandomValues()` to enable buffering; this uses a small\r\n//  * buffer by default to avoid both unbearable throughput decline in some\r\n//  * environments and the waste of time and space for unused values.\r\n//  */\r\n// class BufferedCryptoRandom {\r\n//   private readonly buffer = new Uint32Array(8);\r\n//   private cursor = 0xffff;\r\n//   nextUint32(): number {\r\n//     if (this.cursor >= this.buffer.length) {\r\n//       crypto.getRandomValues(this.buffer);\r\n//       this.cursor = 0;\r\n//     }\r\n//     return this.buffer[this.cursor++];\r\n//   }\r\n// }\r\nlet defaultGenerator;\r\n/**\r\n * Generates a UUIDv7 string.\r\n *\r\n * @returns The 8-4-4-4-12 canonical hexadecimal string representation\r\n * (\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\").\r\n */\r\nconst uuidv7 = () => uuidv7obj().toString();\r\n/** Generates a UUIDv7 object. */\r\nconst uuidv7obj = () => (defaultGenerator || (defaultGenerator = new V7Generator())).generate();\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n// Licensed under the MIT License\nfunction makeUncaughtExceptionHandler(captureFn, onFatalFn) {\n  let calledFatalError = false;\n  return Object.assign(error => {\n    // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n    // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n    // exit behaviour of the SDK accordingly:\n    // - If other listeners are attached, do not exit.\n    // - If the only listener attached is ours, exit.\n    const userProvidedListenersCount = global.process.listeners('uncaughtException').filter(listener => {\n      // There are 2 listeners we ignore:\n      return (\n        // as soon as we're using domains this listener is attached by node itself\n        listener.name !== 'domainUncaughtExceptionClear' &&\n        // the handler we register in this integration\n        listener._posthogErrorHandler !== true\n      );\n    }).length;\n    const processWouldExit = userProvidedListenersCount === 0;\n    captureFn(error, {\n      mechanism: {\n        type: 'onuncaughtexception',\n        handled: false\n      }\n    });\n    if (!calledFatalError && processWouldExit) {\n      calledFatalError = true;\n      onFatalFn();\n    }\n  }, {\n    _posthogErrorHandler: true\n  });\n}\nfunction addUncaughtExceptionListener(captureFn, onFatalFn) {\n  global.process.on('uncaughtException', makeUncaughtExceptionHandler(captureFn, onFatalFn));\n}\nfunction addUnhandledRejectionListener(captureFn) {\n  global.process.on('unhandledRejection', reason => {\n    captureFn(reason, {\n      mechanism: {\n        type: 'onunhandledrejection',\n        handled: false\n      }\n    });\n  });\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n// Licensed under the MIT License\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameChunkIds;\nfunction getFilenameToChunkIdMap(stackParser) {\n  const chunkIdMap = globalThis._posthogChunkIds;\n  if (!chunkIdMap) {\n    console.error('No chunk id map found');\n    return {};\n  }\n  const chunkIdKeys = Object.keys(chunkIdMap);\n  if (cachedFilenameChunkIds && chunkIdKeys.length === lastKeysCount) {\n    return cachedFilenameChunkIds;\n  }\n  lastKeysCount = chunkIdKeys.length;\n  cachedFilenameChunkIds = chunkIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n    const result = parsedStackResults[stackKey];\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const chunkId = chunkIdMap[stackKey];\n        if (filename && chunkId) {\n          acc[filename] = chunkId;\n          parsedStackResults[stackKey] = [filename, chunkId];\n          break;\n        }\n      }\n    }\n    return acc;\n  }, {});\n  return cachedFilenameChunkIds;\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n// Licensed under the MIT License\nfunction isEvent(candidate) {\n  return typeof Event !== 'undefined' && isInstanceOf(candidate, Event);\n}\nfunction isPlainObject(candidate) {\n  return isBuiltin(candidate, 'Object');\n}\nfunction isError(candidate) {\n  switch (Object.prototype.toString.call(candidate)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(candidate, Error);\n  }\n}\nfunction isInstanceOf(candidate, base) {\n  try {\n    return candidate instanceof base;\n  } catch {\n    return false;\n  }\n}\nfunction isErrorEvent(event) {\n  return isBuiltin(event, 'ErrorEvent');\n}\nfunction isBuiltin(candidate, className) {\n  return Object.prototype.toString.call(candidate) === `[object ${className}]`;\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\nasync function propertiesFromUnknownInput(stackParser, frameModifiers, input, hint) {\n  const providedMechanism = hint && hint.mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic'\n  };\n  const errorList = getErrorList(mechanism, input, hint);\n  const exceptionList = await Promise.all(errorList.map(async error => {\n    const exception = await exceptionFromError(stackParser, frameModifiers, error);\n    exception.value = exception.value || '';\n    exception.type = exception.type || 'Error';\n    exception.mechanism = mechanism;\n    return exception;\n  }));\n  const properties = {\n    $exception_list: exceptionList\n  };\n  return properties;\n}\n// Flatten error causes into a list of errors\n// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\nfunction getErrorList(mechanism, input, hint) {\n  const error = getError(mechanism, input, hint);\n  if (error.cause) {\n    return [error, ...getErrorList(mechanism, error.cause, hint)];\n  }\n  return [error];\n}\nfunction getError(mechanism, exception, hint) {\n  if (isError(exception)) {\n    return exception;\n  }\n  mechanism.synthetic = true;\n  if (isPlainObject(exception)) {\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return errorFromProp;\n    }\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n    return ex;\n  }\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception);\n  ex.message = `${exception}`;\n  return ex;\n}\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (isError(value)) {\n        return value;\n      }\n    }\n  }\n  return undefined;\n}\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n  const keys = extractExceptionKeysForMessage(exception);\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n  const className = getObjectClassName(exception);\n  return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;\n}\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n/**\r\n * Given any captured exception, extract its keys and create a sorted\r\n * and truncated list that will be used inside the event message.\r\n * eg. `Non-error exception captured with keys: foo, bar, baz`\r\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  const firstKey = keys[0];\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n  return '';\n}\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n/**\r\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\r\n * non-enumerable properties attached.\r\n *\r\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\r\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\r\n *  an Error.\r\n */\nfunction convertToPlainObject(value) {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value)\n    };\n  } else if (isEvent(value)) {\n    const newObj = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value)\n    };\n    // TODO: figure out why this fails typing (I think CustomEvent is only supported in Node 19 onwards)\n    // if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n    //   newObj.detail = (value as unknown as CustomEvent).detail\n    // }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\r\n * Extracts stack frames from the error and builds an Exception\r\n */\nasync function exceptionFromError(stackParser, frameModifiers, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message\n  };\n  let frames = parseStackFrames(stackParser, error);\n  for (const modifier of frameModifiers) {\n    frames = await modifier(frames);\n  }\n  if (frames.length) {\n    exception.stacktrace = {\n      frames,\n      type: 'raw'\n    };\n  }\n  return exception;\n}\n/**\r\n * Extracts stack frames from the error.stack string\r\n */\nfunction parseStackFrames(stackParser, error) {\n  return applyChunkIds(stackParser(error.stack || '', 1), stackParser);\n}\nfunction applyChunkIds(frames, parser) {\n  const filenameChunkIdMap = getFilenameToChunkIdMap(parser);\n  frames.forEach(frame => {\n    if (frame.filename) {\n      frame.chunk_id = filenameChunkIdMap[frame.filename];\n    }\n  });\n  return frames;\n}\n\nconst SHUTDOWN_TIMEOUT = 2000;\nclass ErrorTracking {\n  static async buildEventMessage(error, hint, distinctId, additionalProperties) {\n    const properties = {\n      ...additionalProperties\n    };\n    // Given stateless nature of Node SDK we capture exceptions using personless processing when no\n    // user can be determined because a distinct_id is not provided e.g. exception autocapture\n    if (!distinctId) {\n      properties.$process_person_profile = false;\n    }\n    const exceptionProperties = await propertiesFromUnknownInput(this.stackParser, this.frameModifiers, error, hint);\n    return {\n      event: '$exception',\n      distinctId: distinctId || uuidv7(),\n      properties: {\n        ...exceptionProperties,\n        ...properties\n      }\n    };\n  }\n  constructor(client, options) {\n    this.client = client;\n    this._exceptionAutocaptureEnabled = options.enableExceptionAutocapture || false;\n    this.startAutocaptureIfEnabled();\n  }\n  startAutocaptureIfEnabled() {\n    if (this.isEnabled()) {\n      addUncaughtExceptionListener(this.onException.bind(this), this.onFatalError.bind(this));\n      addUnhandledRejectionListener(this.onException.bind(this));\n    }\n  }\n  onException(exception, hint) {\n    void ErrorTracking.buildEventMessage(exception, hint).then(msg => {\n      this.client.capture(msg);\n    });\n  }\n  async onFatalError() {\n    await this.client.shutdown(SHUTDOWN_TIMEOUT);\n  }\n  isEnabled() {\n    return !this.client.isDisabled && this._exceptionAutocaptureEnabled;\n  }\n}\n\nfunction setupExpressErrorHandler(_posthog, app) {\n  app.use((error, _, __, next) => {\n    const hint = {\n      mechanism: {\n        type: 'middleware',\n        handled: false\n      }\n    };\n    // Given stateless nature of Node SDK we capture exceptions using personless processing\n    // when no user can be determined e.g. in the case of exception autocapture\n    ErrorTracking.buildEventMessage(error, hint, uuidv7(), {\n      $process_person_profile: false\n    }).then(msg => _posthog.capture(msg));\n    next(error);\n  });\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(basePath = process.argv[1] ? (0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(process.argv[1]) : process.cwd(), isWindows = path__WEBPACK_IMPORTED_MODULE_0__.sep === '\\\\') {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n  return filename => {\n    if (!filename) {\n      return;\n    }\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n    // eslint-disable-next-line prefer-const\n    let {\n      dir,\n      base: file,\n      ext\n    } = path__WEBPACK_IMPORTED_MODULE_0__.posix.parse(normalizedFilename);\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n    return decodedFile;\n  };\n}\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n  .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n// Licensed under the MIT License\n/** A simple Least Recently Used map */\nclass ReduceableCache {\n  constructor(_maxSize) {\n    this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  set(key, value) {\n    this._cache.set(key, value);\n  }\n  /** Remove an entry and return the entry if it was in the cache */\n  reduce() {\n    while (this._cache.size >= this._maxSize) {\n      const value = this._cache.keys().next().value;\n      if (value) {\n        // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n        this._cache.delete(value);\n      }\n    }\n  }\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\nconst LRU_FILE_CONTENTS_CACHE = new ReduceableCache(25);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new ReduceableCache(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\nasync function addSourceContext(frames) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n  // Maps preserve insertion order, so we iterate in reverse, starting at the\n  // outermost frame and closer to where the exception has occurred (poor mans priority)\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n    const filename = frame?.filename;\n    if (!frame || typeof filename !== 'string' || typeof frame.lineno !== 'number' || shouldSkipContextLinesForFile(filename) || shouldSkipContextLinesForFrame(frame)) {\n      continue;\n    }\n    const filesToLinesOutput = filesToLines[filename];\n    if (!filesToLinesOutput) {\n      filesToLines[filename] = [];\n    }\n    filesToLines[filename].push(frame.lineno);\n  }\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return frames;\n  }\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {});\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (frames && frames.length > 0) {\n    addSourceContextToFrames(frames, LRU_FILE_CONTENTS_CACHE);\n  }\n  // Once we're finished processing an exception reduce the files held in the cache\n  // so that we don't indefinetly increase the size of this map\n  LRU_FILE_CONTENTS_CACHE.reduce();\n  return frames;\n}\n/**\r\n * Extracts lines from a file and stores them in a cache.\r\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise(resolve => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = (0,node_fs__WEBPACK_IMPORTED_MODULE_1__.createReadStream)(path);\n    const lineReaded = (0,node_readline__WEBPACK_IMPORTED_MODULE_2__.createInterface)({\n      input: stream\n    });\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve() {\n      stream.destroy();\n      resolve();\n    }\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError() {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) {\n        return;\n      }\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = snipLine(line, 0);\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(frames, cache) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n      addContextToFrame(frame.lineno, frame, contents);\n    }\n  }\n}\n/**\r\n * Resolves context lines before and after the given line number and appends them to the frame;\r\n */\nfunction addContextToFrame(lineno, frame, contents) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno is optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    return;\n  }\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      return;\n    }\n    frame.pre_context.push(line);\n  }\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    return;\n  }\n  frame.context_line = contents[lineno];\n  const end = makeRangeEnd(lineno);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n/**\r\n * Clears the context lines from a frame, used to reset a frame to its original state\r\n * if we fail to resolve all context lines for it.\r\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n/**\r\n * Determines if context lines should be skipped for a file.\r\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\r\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\r\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\r\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  return path.startsWith('node:') || path.endsWith('.min.js') || path.endsWith('.min.cjs') || path.endsWith('.min.mjs') || path.startsWith('data:');\n}\n/**\r\n * Determines if we should skip contextlines based off the max lineno and colno values.\r\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) {\n    return true;\n  }\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) {\n    return true;\n  }\n  return false;\n}\n/**\r\n * Checks if we have all the contents that we need in the cache.\r\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) {\n    return false;\n  }\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\r\n * the ranges are merged to create a single range.\r\n */\nfunction makeLineReaderRanges(lines) {\n  if (!lines.length) {\n    return [];\n  }\n  let i = 0;\n  const line = lines[0];\n  if (typeof line !== 'number') {\n    return [];\n  }\n  let current = makeContextRange(line);\n  const out = [];\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + DEFAULT_LINES_OF_CONTEXT;\n    } else {\n      out.push(current);\n      current = makeContextRange(next);\n    }\n    i++;\n  }\n  return out;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line) {\n  return [makeRangeStart(line), makeRangeEnd(line)];\n}\n// Compute inclusive end context range\nfunction makeRangeStart(line) {\n  return Math.max(1, line - DEFAULT_LINES_OF_CONTEXT);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line) {\n  return line + DEFAULT_LINES_OF_CONTEXT;\n}\n/**\r\n * Get or init map value\r\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n  return value;\n}\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    colno = lineLength;\n  }\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `...${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += '...';\n  }\n  return newLine;\n}\n\nvar version = \"5.6.0\";\n\nvar PostHogPersistedProperty;\r\n(function (PostHogPersistedProperty) {\r\n    PostHogPersistedProperty[\"AnonymousId\"] = \"anonymous_id\";\r\n    PostHogPersistedProperty[\"DistinctId\"] = \"distinct_id\";\r\n    PostHogPersistedProperty[\"Props\"] = \"props\";\r\n    PostHogPersistedProperty[\"FeatureFlagDetails\"] = \"feature_flag_details\";\r\n    PostHogPersistedProperty[\"FeatureFlags\"] = \"feature_flags\";\r\n    PostHogPersistedProperty[\"FeatureFlagPayloads\"] = \"feature_flag_payloads\";\r\n    PostHogPersistedProperty[\"BootstrapFeatureFlagDetails\"] = \"bootstrap_feature_flag_details\";\r\n    PostHogPersistedProperty[\"BootstrapFeatureFlags\"] = \"bootstrap_feature_flags\";\r\n    PostHogPersistedProperty[\"BootstrapFeatureFlagPayloads\"] = \"bootstrap_feature_flag_payloads\";\r\n    PostHogPersistedProperty[\"OverrideFeatureFlags\"] = \"override_feature_flags\";\r\n    PostHogPersistedProperty[\"Queue\"] = \"queue\";\r\n    PostHogPersistedProperty[\"OptedOut\"] = \"opted_out\";\r\n    PostHogPersistedProperty[\"SessionId\"] = \"session_id\";\r\n    PostHogPersistedProperty[\"SessionStartTimestamp\"] = \"session_start_timestamp\";\r\n    PostHogPersistedProperty[\"SessionLastTimestamp\"] = \"session_timestamp\";\r\n    PostHogPersistedProperty[\"PersonProperties\"] = \"person_properties\";\r\n    PostHogPersistedProperty[\"GroupProperties\"] = \"group_properties\";\r\n    PostHogPersistedProperty[\"InstalledAppBuild\"] = \"installed_app_build\";\r\n    PostHogPersistedProperty[\"InstalledAppVersion\"] = \"installed_app_version\";\r\n    PostHogPersistedProperty[\"SessionReplay\"] = \"session_replay\";\r\n    PostHogPersistedProperty[\"SurveyLastSeenDate\"] = \"survey_last_seen_date\";\r\n    PostHogPersistedProperty[\"SurveysSeen\"] = \"surveys_seen\";\r\n    PostHogPersistedProperty[\"Surveys\"] = \"surveys\";\r\n    PostHogPersistedProperty[\"RemoteConfig\"] = \"remote_config\";\r\n    PostHogPersistedProperty[\"FlagsEndpointWasHit\"] = \"flags_endpoint_was_hit\";\r\n})(PostHogPersistedProperty || (PostHogPersistedProperty = {}));\r\n// Any key prefixed with `attr__` can be added\r\nvar Compression;\r\n(function (Compression) {\r\n    Compression[\"GZipJS\"] = \"gzip-js\";\r\n    Compression[\"Base64\"] = \"base64\";\r\n})(Compression || (Compression = {}));\r\nvar SurveyPosition;\r\n(function (SurveyPosition) {\r\n    SurveyPosition[\"TopLeft\"] = \"top_left\";\r\n    SurveyPosition[\"TopCenter\"] = \"top_center\";\r\n    SurveyPosition[\"TopRight\"] = \"top_right\";\r\n    SurveyPosition[\"MiddleLeft\"] = \"middle_left\";\r\n    SurveyPosition[\"MiddleCenter\"] = \"middle_center\";\r\n    SurveyPosition[\"MiddleRight\"] = \"middle_right\";\r\n    SurveyPosition[\"Left\"] = \"left\";\r\n    SurveyPosition[\"Right\"] = \"right\";\r\n    SurveyPosition[\"Center\"] = \"center\";\r\n})(SurveyPosition || (SurveyPosition = {}));\r\nvar SurveyWidgetType;\r\n(function (SurveyWidgetType) {\r\n    SurveyWidgetType[\"Button\"] = \"button\";\r\n    SurveyWidgetType[\"Tab\"] = \"tab\";\r\n    SurveyWidgetType[\"Selector\"] = \"selector\";\r\n})(SurveyWidgetType || (SurveyWidgetType = {}));\r\nvar SurveyType;\r\n(function (SurveyType) {\r\n    SurveyType[\"Popover\"] = \"popover\";\r\n    SurveyType[\"API\"] = \"api\";\r\n    SurveyType[\"Widget\"] = \"widget\";\r\n})(SurveyType || (SurveyType = {}));\r\nvar SurveyQuestionDescriptionContentType;\r\n(function (SurveyQuestionDescriptionContentType) {\r\n    SurveyQuestionDescriptionContentType[\"Html\"] = \"html\";\r\n    SurveyQuestionDescriptionContentType[\"Text\"] = \"text\";\r\n})(SurveyQuestionDescriptionContentType || (SurveyQuestionDescriptionContentType = {}));\r\nvar SurveyRatingDisplay;\r\n(function (SurveyRatingDisplay) {\r\n    SurveyRatingDisplay[\"Number\"] = \"number\";\r\n    SurveyRatingDisplay[\"Emoji\"] = \"emoji\";\r\n})(SurveyRatingDisplay || (SurveyRatingDisplay = {}));\r\nvar SurveyQuestionType;\r\n(function (SurveyQuestionType) {\r\n    SurveyQuestionType[\"Open\"] = \"open\";\r\n    SurveyQuestionType[\"MultipleChoice\"] = \"multiple_choice\";\r\n    SurveyQuestionType[\"SingleChoice\"] = \"single_choice\";\r\n    SurveyQuestionType[\"Rating\"] = \"rating\";\r\n    SurveyQuestionType[\"Link\"] = \"link\";\r\n})(SurveyQuestionType || (SurveyQuestionType = {}));\r\nvar SurveyQuestionBranchingType;\r\n(function (SurveyQuestionBranchingType) {\r\n    SurveyQuestionBranchingType[\"NextQuestion\"] = \"next_question\";\r\n    SurveyQuestionBranchingType[\"End\"] = \"end\";\r\n    SurveyQuestionBranchingType[\"ResponseBased\"] = \"response_based\";\r\n    SurveyQuestionBranchingType[\"SpecificQuestion\"] = \"specific_question\";\r\n})(SurveyQuestionBranchingType || (SurveyQuestionBranchingType = {}));\r\nvar SurveyMatchType;\r\n(function (SurveyMatchType) {\r\n    SurveyMatchType[\"Regex\"] = \"regex\";\r\n    SurveyMatchType[\"NotRegex\"] = \"not_regex\";\r\n    SurveyMatchType[\"Exact\"] = \"exact\";\r\n    SurveyMatchType[\"IsNot\"] = \"is_not\";\r\n    SurveyMatchType[\"Icontains\"] = \"icontains\";\r\n    SurveyMatchType[\"NotIcontains\"] = \"not_icontains\";\r\n})(SurveyMatchType || (SurveyMatchType = {}));\r\n/** Sync with plugin-server/src/types.ts */\r\nvar ActionStepStringMatching;\r\n(function (ActionStepStringMatching) {\r\n    ActionStepStringMatching[\"Contains\"] = \"contains\";\r\n    ActionStepStringMatching[\"Exact\"] = \"exact\";\r\n    ActionStepStringMatching[\"Regex\"] = \"regex\";\r\n})(ActionStepStringMatching || (ActionStepStringMatching = {}));\n\nconst normalizeFlagsResponse = (flagsResponse) => {\r\n    if ('flags' in flagsResponse) {\r\n        // Convert v2 format to v1 format\r\n        const featureFlags = getFlagValuesFromFlags(flagsResponse.flags);\r\n        const featureFlagPayloads = getPayloadsFromFlags(flagsResponse.flags);\r\n        return {\r\n            ...flagsResponse,\r\n            featureFlags,\r\n            featureFlagPayloads,\r\n        };\r\n    }\r\n    else {\r\n        // Convert v1 format to v2 format\r\n        const featureFlags = flagsResponse.featureFlags ?? {};\r\n        const featureFlagPayloads = Object.fromEntries(Object.entries(flagsResponse.featureFlagPayloads || {}).map(([k, v]) => [k, parsePayload(v)]));\r\n        const flags = Object.fromEntries(Object.entries(featureFlags).map(([key, value]) => [\r\n            key,\r\n            getFlagDetailFromFlagAndPayload(key, value, featureFlagPayloads[key]),\r\n        ]));\r\n        return {\r\n            ...flagsResponse,\r\n            featureFlags,\r\n            featureFlagPayloads,\r\n            flags,\r\n        };\r\n    }\r\n};\r\nfunction getFlagDetailFromFlagAndPayload(key, value, payload) {\r\n    return {\r\n        key: key,\r\n        enabled: typeof value === 'string' ? true : value,\r\n        variant: typeof value === 'string' ? value : undefined,\r\n        reason: undefined,\r\n        metadata: {\r\n            id: undefined,\r\n            version: undefined,\r\n            payload: payload ? JSON.stringify(payload) : undefined,\r\n            description: undefined,\r\n        },\r\n    };\r\n}\r\n/**\r\n * Get the flag values from the flags v4 response.\r\n * @param flags - The flags\r\n * @returns The flag values\r\n */\r\nconst getFlagValuesFromFlags = (flags) => {\r\n    return Object.fromEntries(Object.entries(flags ?? {})\r\n        .map(([key, detail]) => [key, getFeatureFlagValue(detail)])\r\n        .filter(([, value]) => value !== undefined));\r\n};\r\n/**\r\n * Get the payloads from the flags v4 response.\r\n * @param flags - The flags\r\n * @returns The payloads\r\n */\r\nconst getPayloadsFromFlags = (flags) => {\r\n    const safeFlags = flags ?? {};\r\n    return Object.fromEntries(Object.keys(safeFlags)\r\n        .filter((flag) => {\r\n        const details = safeFlags[flag];\r\n        return details.enabled && details.metadata && details.metadata.payload !== undefined;\r\n    })\r\n        .map((flag) => {\r\n        const payload = safeFlags[flag].metadata?.payload;\r\n        return [flag, payload ? parsePayload(payload) : undefined];\r\n    }));\r\n};\r\nconst getFeatureFlagValue = (detail) => {\r\n    return detail === undefined ? undefined : detail.variant ?? detail.enabled;\r\n};\r\nconst parsePayload = (response) => {\r\n    if (typeof response !== 'string') {\r\n        return response;\r\n    }\r\n    try {\r\n        return JSON.parse(response);\r\n    }\r\n    catch {\r\n        return response;\r\n    }\r\n};\n\nconst STRING_FORMAT = 'utf8';\r\nfunction assert(truthyValue, message) {\r\n    if (!truthyValue || typeof truthyValue !== 'string' || isEmpty(truthyValue)) {\r\n        throw new Error(message);\r\n    }\r\n}\r\nfunction isEmpty(truthyValue) {\r\n    if (truthyValue.trim().length === 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction removeTrailingSlash(url) {\r\n    return url?.replace(/\\/+$/, '');\r\n}\r\nasync function retriable(fn, props) {\r\n    let lastError = null;\r\n    for (let i = 0; i < props.retryCount + 1; i++) {\r\n        if (i > 0) {\r\n            // don't wait when it's the last try\r\n            await new Promise((r) => setTimeout(r, props.retryDelay));\r\n        }\r\n        try {\r\n            const res = await fn();\r\n            return res;\r\n        }\r\n        catch (e) {\r\n            lastError = e;\r\n            if (!props.retryCheck(e)) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    throw lastError;\r\n}\r\nfunction currentISOTime() {\r\n    return new Date().toISOString();\r\n}\r\nfunction safeSetTimeout(fn, timeout) {\r\n    // NOTE: we use this so rarely that it is totally fine to do `safeSetTimeout(fn, 0)``\r\n    // rather than setImmediate.\r\n    const t = setTimeout(fn, timeout);\r\n    // We unref if available to prevent Node.js hanging on exit\r\n    t?.unref && t?.unref();\r\n    return t;\r\n}\r\nfunction allSettled(promises) {\r\n    return Promise.all(promises.map((p) => (p ?? Promise.resolve()).then((value) => ({ status: 'fulfilled', value }), (reason) => ({ status: 'rejected', reason }))));\r\n}\n\n/**\r\n * Older browsers and some runtimes don't support this yet\r\n * This API (as of 2025-05-07) is not available on React Native.\r\n */\r\nfunction isGzipSupported() {\r\n    return 'CompressionStream' in globalThis;\r\n}\r\n/**\r\n * Gzip a string using Compression Streams API if it's available\r\n */\r\nasync function gzipCompress(input, isDebug = true) {\r\n    try {\r\n        // Turn the string into a stream using a Blob, and then compress it\r\n        const dataStream = new Blob([input], {\r\n            type: 'text/plain',\r\n        }).stream();\r\n        const compressedStream = dataStream.pipeThrough(new CompressionStream('gzip'));\r\n        // Using a Response to easily extract the readablestream value. Decoding into a string for fetch\r\n        return await new Response(compressedStream).blob();\r\n    }\r\n    catch (error) {\r\n        if (isDebug) {\r\n            console.error('Failed to gzip compress data', error);\r\n        }\r\n        return null;\r\n    }\r\n}\n\nclass SimpleEventEmitter {\r\n    constructor() {\r\n        this.events = {};\r\n        this.events = {};\r\n    }\r\n    on(event, listener) {\r\n        if (!this.events[event]) {\r\n            this.events[event] = [];\r\n        }\r\n        this.events[event].push(listener);\r\n        return () => {\r\n            this.events[event] = this.events[event].filter((x) => x !== listener);\r\n        };\r\n    }\r\n    emit(event, payload) {\r\n        for (const listener of this.events[event] || []) {\r\n            listener(payload);\r\n        }\r\n        for (const listener of this.events['*'] || []) {\r\n            listener(event, payload);\r\n        }\r\n    }\r\n}\n\nclass PostHogFetchHttpError extends Error {\r\n    constructor(response, reqByteLength) {\r\n        super('HTTP error while fetching PostHog: status=' + response.status + ', reqByteLength=' + reqByteLength);\r\n        this.response = response;\r\n        this.reqByteLength = reqByteLength;\r\n        this.name = 'PostHogFetchHttpError';\r\n    }\r\n    get status() {\r\n        return this.response.status;\r\n    }\r\n    get text() {\r\n        return this.response.text();\r\n    }\r\n    get json() {\r\n        return this.response.json();\r\n    }\r\n}\r\nclass PostHogFetchNetworkError extends Error {\r\n    constructor(error) {\r\n        // TRICKY: \"cause\" is a newer property but is just ignored otherwise. Cast to any to ignore the type issue.\r\n        // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error\r\n        // @ts-ignore\r\n        super('Network error while fetching PostHog', error instanceof Error ? { cause: error } : {});\r\n        this.error = error;\r\n        this.name = 'PostHogFetchNetworkError';\r\n    }\r\n}\r\nasync function logFlushError(err) {\r\n    if (err instanceof PostHogFetchHttpError) {\r\n        let text = '';\r\n        try {\r\n            text = await err.text;\r\n        }\r\n        catch { }\r\n        console.error(`Error while flushing PostHog: message=${err.message}, response body=${text}`, err);\r\n    }\r\n    else {\r\n        console.error('Error while flushing PostHog', err);\r\n    }\r\n    return Promise.resolve();\r\n}\r\nfunction isPostHogFetchError(err) {\r\n    return typeof err === 'object' && (err instanceof PostHogFetchHttpError || err instanceof PostHogFetchNetworkError);\r\n}\r\nfunction isPostHogFetchContentTooLargeError(err) {\r\n    return typeof err === 'object' && err instanceof PostHogFetchHttpError && err.status === 413;\r\n}\r\nvar QuotaLimitedFeature;\r\n(function (QuotaLimitedFeature) {\r\n    QuotaLimitedFeature[\"FeatureFlags\"] = \"feature_flags\";\r\n    QuotaLimitedFeature[\"Recordings\"] = \"recordings\";\r\n})(QuotaLimitedFeature || (QuotaLimitedFeature = {}));\r\nclass PostHogCoreStateless {\r\n    constructor(apiKey, options) {\r\n        this.flushPromise = null;\r\n        this.shutdownPromise = null;\r\n        this.pendingPromises = {};\r\n        // internal\r\n        this._events = new SimpleEventEmitter();\r\n        this._isInitialized = false;\r\n        assert(apiKey, \"You must pass your PostHog project's api key.\");\r\n        this.apiKey = apiKey;\r\n        this.host = removeTrailingSlash(options?.host || 'https://us.i.posthog.com');\r\n        this.flushAt = options?.flushAt ? Math.max(options?.flushAt, 1) : 20;\r\n        this.maxBatchSize = Math.max(this.flushAt, options?.maxBatchSize ?? 100);\r\n        this.maxQueueSize = Math.max(this.flushAt, options?.maxQueueSize ?? 1000);\r\n        this.flushInterval = options?.flushInterval ?? 10000;\r\n        this.preloadFeatureFlags = options?.preloadFeatureFlags ?? true;\r\n        // If enable is explicitly set to false we override the optout\r\n        this.defaultOptIn = options?.defaultOptIn ?? true;\r\n        this.disableSurveys = options?.disableSurveys ?? false;\r\n        this._retryOptions = {\r\n            retryCount: options?.fetchRetryCount ?? 3,\r\n            retryDelay: options?.fetchRetryDelay ?? 3000,\r\n            retryCheck: isPostHogFetchError,\r\n        };\r\n        this.requestTimeout = options?.requestTimeout ?? 10000; // 10 seconds\r\n        this.featureFlagsRequestTimeoutMs = options?.featureFlagsRequestTimeoutMs ?? 3000; // 3 seconds\r\n        this.remoteConfigRequestTimeoutMs = options?.remoteConfigRequestTimeoutMs ?? 3000; // 3 seconds\r\n        this.disableGeoip = options?.disableGeoip ?? true;\r\n        this.disabled = options?.disabled ?? false;\r\n        this.historicalMigration = options?.historicalMigration ?? false;\r\n        // Init promise allows the derived class to block calls until it is ready\r\n        this._initPromise = Promise.resolve();\r\n        this._isInitialized = true;\r\n        this.disableCompression = !isGzipSupported() || (options?.disableCompression ?? false);\r\n    }\r\n    logMsgIfDebug(fn) {\r\n        if (this.isDebug) {\r\n            fn();\r\n        }\r\n    }\r\n    wrap(fn) {\r\n        if (this.disabled) {\r\n            this.logMsgIfDebug(() => console.warn('[PostHog] The client is disabled'));\r\n            return;\r\n        }\r\n        if (this._isInitialized) {\r\n            // NOTE: We could also check for the \"opt in\" status here...\r\n            return fn();\r\n        }\r\n        this._initPromise.then(() => fn());\r\n    }\r\n    getCommonEventProperties() {\r\n        return {\r\n            $lib: this.getLibraryId(),\r\n            $lib_version: this.getLibraryVersion(),\r\n        };\r\n    }\r\n    get optedOut() {\r\n        return this.getPersistedProperty(PostHogPersistedProperty.OptedOut) ?? !this.defaultOptIn;\r\n    }\r\n    async optIn() {\r\n        this.wrap(() => {\r\n            this.setPersistedProperty(PostHogPersistedProperty.OptedOut, false);\r\n        });\r\n    }\r\n    async optOut() {\r\n        this.wrap(() => {\r\n            this.setPersistedProperty(PostHogPersistedProperty.OptedOut, true);\r\n        });\r\n    }\r\n    on(event, cb) {\r\n        return this._events.on(event, cb);\r\n    }\r\n    debug(enabled = true) {\r\n        this.removeDebugCallback?.();\r\n        if (enabled) {\r\n            const removeDebugCallback = this.on('*', (event, payload) => console.log('PostHog Debug', event, payload));\r\n            this.removeDebugCallback = () => {\r\n                removeDebugCallback();\r\n                this.removeDebugCallback = undefined;\r\n            };\r\n        }\r\n    }\r\n    get isDebug() {\r\n        return !!this.removeDebugCallback;\r\n    }\r\n    get isDisabled() {\r\n        return this.disabled;\r\n    }\r\n    buildPayload(payload) {\r\n        return {\r\n            distinct_id: payload.distinct_id,\r\n            event: payload.event,\r\n            properties: {\r\n                ...(payload.properties || {}),\r\n                ...this.getCommonEventProperties(), // Common PH props\r\n            },\r\n        };\r\n    }\r\n    addPendingPromise(promise) {\r\n        const promiseUUID = uuidv7();\r\n        this.pendingPromises[promiseUUID] = promise;\r\n        promise\r\n            .catch(() => { })\r\n            .finally(() => {\r\n            delete this.pendingPromises[promiseUUID];\r\n        });\r\n        return promise;\r\n    }\r\n    /***\r\n     *** TRACKING\r\n     ***/\r\n    identifyStateless(distinctId, properties, options) {\r\n        this.wrap(() => {\r\n            // The properties passed to identifyStateless are event properties.\r\n            // To add person properties, pass in all person properties to the `$set` and `$set_once` keys.\r\n            const payload = {\r\n                ...this.buildPayload({\r\n                    distinct_id: distinctId,\r\n                    event: '$identify',\r\n                    properties,\r\n                }),\r\n            };\r\n            this.enqueue('identify', payload, options);\r\n        });\r\n    }\r\n    async identifyStatelessImmediate(distinctId, properties, options) {\r\n        const payload = {\r\n            ...this.buildPayload({\r\n                distinct_id: distinctId,\r\n                event: '$identify',\r\n                properties,\r\n            }),\r\n        };\r\n        await this.sendImmediate('identify', payload, options);\r\n    }\r\n    captureStateless(distinctId, event, properties, options) {\r\n        this.wrap(() => {\r\n            const payload = this.buildPayload({ distinct_id: distinctId, event, properties });\r\n            this.enqueue('capture', payload, options);\r\n        });\r\n    }\r\n    async captureStatelessImmediate(distinctId, event, properties, options) {\r\n        const payload = this.buildPayload({ distinct_id: distinctId, event, properties });\r\n        await this.sendImmediate('capture', payload, options);\r\n    }\r\n    aliasStateless(alias, distinctId, properties, options) {\r\n        this.wrap(() => {\r\n            const payload = this.buildPayload({\r\n                event: '$create_alias',\r\n                distinct_id: distinctId,\r\n                properties: {\r\n                    ...(properties || {}),\r\n                    distinct_id: distinctId,\r\n                    alias,\r\n                },\r\n            });\r\n            this.enqueue('alias', payload, options);\r\n        });\r\n    }\r\n    async aliasStatelessImmediate(alias, distinctId, properties, options) {\r\n        const payload = this.buildPayload({\r\n            event: '$create_alias',\r\n            distinct_id: distinctId,\r\n            properties: {\r\n                ...(properties || {}),\r\n                distinct_id: distinctId,\r\n                alias,\r\n            },\r\n        });\r\n        await this.sendImmediate('alias', payload, options);\r\n    }\r\n    /***\r\n     *** GROUPS\r\n     ***/\r\n    groupIdentifyStateless(groupType, groupKey, groupProperties, options, distinctId, eventProperties) {\r\n        this.wrap(() => {\r\n            const payload = this.buildPayload({\r\n                distinct_id: distinctId || `$${groupType}_${groupKey}`,\r\n                event: '$groupidentify',\r\n                properties: {\r\n                    $group_type: groupType,\r\n                    $group_key: groupKey,\r\n                    $group_set: groupProperties || {},\r\n                    ...(eventProperties || {}),\r\n                },\r\n            });\r\n            this.enqueue('capture', payload, options);\r\n        });\r\n    }\r\n    async getRemoteConfig() {\r\n        await this._initPromise;\r\n        let host = this.host;\r\n        if (host === 'https://us.i.posthog.com') {\r\n            host = 'https://us-assets.i.posthog.com';\r\n        }\r\n        else if (host === 'https://eu.i.posthog.com') {\r\n            host = 'https://eu-assets.i.posthog.com';\r\n        }\r\n        const url = `${host}/array/${this.apiKey}/config`;\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            headers: { ...this.getCustomHeaders(), 'Content-Type': 'application/json' },\r\n        };\r\n        // Don't retry remote config API calls\r\n        return this.fetchWithRetry(url, fetchOptions, { retryCount: 0 }, this.remoteConfigRequestTimeoutMs)\r\n            .then((response) => response.json())\r\n            .catch((error) => {\r\n            this.logMsgIfDebug(() => console.error('Remote config could not be loaded', error));\r\n            this._events.emit('error', error);\r\n            return undefined;\r\n        });\r\n    }\r\n    /***\r\n     *** FEATURE FLAGS\r\n     ***/\r\n    async getFlags(distinctId, groups = {}, personProperties = {}, groupProperties = {}, extraPayload = {}) {\r\n        await this._initPromise;\r\n        const url = `${this.host}/flags/?v=2&config=true`;\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: { ...this.getCustomHeaders(), 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                token: this.apiKey,\r\n                distinct_id: distinctId,\r\n                groups,\r\n                person_properties: personProperties,\r\n                group_properties: groupProperties,\r\n                ...extraPayload,\r\n            }),\r\n        };\r\n        this.logMsgIfDebug(() => console.log('PostHog Debug', 'Flags URL', url));\r\n        // Don't retry /flags API calls\r\n        return this.fetchWithRetry(url, fetchOptions, { retryCount: 0 }, this.featureFlagsRequestTimeoutMs)\r\n            .then((response) => response.json())\r\n            .then((response) => normalizeFlagsResponse(response))\r\n            .catch((error) => {\r\n            this._events.emit('error', error);\r\n            return undefined;\r\n        });\r\n    }\r\n    async getFeatureFlagStateless(key, distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip) {\r\n        await this._initPromise;\r\n        const flagDetailResponse = await this.getFeatureFlagDetailStateless(key, distinctId, groups, personProperties, groupProperties, disableGeoip);\r\n        if (flagDetailResponse === undefined) {\r\n            // If we haven't loaded flags yet, or errored out, we respond with undefined\r\n            return {\r\n                response: undefined,\r\n                requestId: undefined,\r\n            };\r\n        }\r\n        let response = getFeatureFlagValue(flagDetailResponse.response);\r\n        if (response === undefined) {\r\n            // For cases where the flag is unknown, return false\r\n            response = false;\r\n        }\r\n        // If we have flags we either return the value (true or string) or false\r\n        return {\r\n            response,\r\n            requestId: flagDetailResponse.requestId,\r\n        };\r\n    }\r\n    async getFeatureFlagDetailStateless(key, distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip) {\r\n        await this._initPromise;\r\n        const flagsResponse = await this.getFeatureFlagDetailsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, [key]);\r\n        if (flagsResponse === undefined) {\r\n            return undefined;\r\n        }\r\n        const featureFlags = flagsResponse.flags;\r\n        const flagDetail = featureFlags[key];\r\n        return {\r\n            response: flagDetail,\r\n            requestId: flagsResponse.requestId,\r\n        };\r\n    }\r\n    async getFeatureFlagPayloadStateless(key, distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip) {\r\n        await this._initPromise;\r\n        const payloads = await this.getFeatureFlagPayloadsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, [key]);\r\n        if (!payloads) {\r\n            return undefined;\r\n        }\r\n        const response = payloads[key];\r\n        // Undefined means a loading or missing data issue. Null means evaluation happened and there was no match\r\n        if (response === undefined) {\r\n            return null;\r\n        }\r\n        return response;\r\n    }\r\n    async getFeatureFlagPayloadsStateless(distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip, flagKeysToEvaluate) {\r\n        await this._initPromise;\r\n        const payloads = (await this.getFeatureFlagsAndPayloadsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, flagKeysToEvaluate)).payloads;\r\n        return payloads;\r\n    }\r\n    async getFeatureFlagsStateless(distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip, flagKeysToEvaluate) {\r\n        await this._initPromise;\r\n        return await this.getFeatureFlagsAndPayloadsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, flagKeysToEvaluate);\r\n    }\r\n    async getFeatureFlagsAndPayloadsStateless(distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip, flagKeysToEvaluate) {\r\n        await this._initPromise;\r\n        const featureFlagDetails = await this.getFeatureFlagDetailsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, flagKeysToEvaluate);\r\n        if (!featureFlagDetails) {\r\n            return {\r\n                flags: undefined,\r\n                payloads: undefined,\r\n                requestId: undefined,\r\n            };\r\n        }\r\n        return {\r\n            flags: featureFlagDetails.featureFlags,\r\n            payloads: featureFlagDetails.featureFlagPayloads,\r\n            requestId: featureFlagDetails.requestId,\r\n        };\r\n    }\r\n    async getFeatureFlagDetailsStateless(distinctId, groups = {}, personProperties = {}, groupProperties = {}, disableGeoip, flagKeysToEvaluate) {\r\n        await this._initPromise;\r\n        const extraPayload = {};\r\n        if (disableGeoip ?? this.disableGeoip) {\r\n            extraPayload['geoip_disable'] = true;\r\n        }\r\n        if (flagKeysToEvaluate) {\r\n            extraPayload['flag_keys_to_evaluate'] = flagKeysToEvaluate;\r\n        }\r\n        const flagsResponse = await this.getFlags(distinctId, groups, personProperties, groupProperties, extraPayload);\r\n        if (flagsResponse === undefined) {\r\n            // We probably errored out, so return undefined\r\n            return undefined;\r\n        }\r\n        // if there's an error on the flagsResponse, log a console error, but don't throw an error\r\n        if (flagsResponse.errorsWhileComputingFlags) {\r\n            console.error('[FEATURE FLAGS] Error while computing feature flags, some flags may be missing or incorrect. Learn more at https://posthog.com/docs/feature-flags/best-practices');\r\n        }\r\n        // Add check for quota limitation on feature flags\r\n        if (flagsResponse.quotaLimited?.includes(QuotaLimitedFeature.FeatureFlags)) {\r\n            console.warn('[FEATURE FLAGS] Feature flags quota limit exceeded - feature flags unavailable. Learn more about billing limits at https://posthog.com/docs/billing/limits-alerts');\r\n            return {\r\n                flags: {},\r\n                featureFlags: {},\r\n                featureFlagPayloads: {},\r\n                requestId: flagsResponse?.requestId,\r\n            };\r\n        }\r\n        return flagsResponse;\r\n    }\r\n    /***\r\n     *** SURVEYS\r\n     ***/\r\n    async getSurveysStateless() {\r\n        await this._initPromise;\r\n        if (this.disableSurveys === true) {\r\n            this.logMsgIfDebug(() => console.log('PostHog Debug', 'Loading surveys is disabled.'));\r\n            return [];\r\n        }\r\n        const url = `${this.host}/api/surveys/?token=${this.apiKey}`;\r\n        const fetchOptions = {\r\n            method: 'GET',\r\n            headers: { ...this.getCustomHeaders(), 'Content-Type': 'application/json' },\r\n        };\r\n        const response = await this.fetchWithRetry(url, fetchOptions)\r\n            .then((response) => {\r\n            if (response.status !== 200 || !response.json) {\r\n                const msg = `Surveys API could not be loaded: ${response.status}`;\r\n                const error = new Error(msg);\r\n                this.logMsgIfDebug(() => console.error(error));\r\n                this._events.emit('error', new Error(msg));\r\n                return undefined;\r\n            }\r\n            return response.json();\r\n        })\r\n            .catch((error) => {\r\n            this.logMsgIfDebug(() => console.error('Surveys API could not be loaded', error));\r\n            this._events.emit('error', error);\r\n            return undefined;\r\n        });\r\n        const newSurveys = response?.surveys;\r\n        if (newSurveys) {\r\n            this.logMsgIfDebug(() => console.log('PostHog Debug', 'Surveys fetched from API: ', JSON.stringify(newSurveys)));\r\n        }\r\n        return newSurveys ?? [];\r\n    }\r\n    get props() {\r\n        if (!this._props) {\r\n            this._props = this.getPersistedProperty(PostHogPersistedProperty.Props);\r\n        }\r\n        return this._props || {};\r\n    }\r\n    set props(val) {\r\n        this._props = val;\r\n    }\r\n    async register(properties) {\r\n        this.wrap(() => {\r\n            this.props = {\r\n                ...this.props,\r\n                ...properties,\r\n            };\r\n            this.setPersistedProperty(PostHogPersistedProperty.Props, this.props);\r\n        });\r\n    }\r\n    async unregister(property) {\r\n        this.wrap(() => {\r\n            delete this.props[property];\r\n            this.setPersistedProperty(PostHogPersistedProperty.Props, this.props);\r\n        });\r\n    }\r\n    /***\r\n     *** QUEUEING AND FLUSHING\r\n     ***/\r\n    enqueue(type, _message, options) {\r\n        this.wrap(() => {\r\n            if (this.optedOut) {\r\n                this._events.emit(type, `Library is disabled. Not sending event. To re-enable, call posthog.optIn()`);\r\n                return;\r\n            }\r\n            const message = this.prepareMessage(type, _message, options);\r\n            const queue = this.getPersistedProperty(PostHogPersistedProperty.Queue) || [];\r\n            if (queue.length >= this.maxQueueSize) {\r\n                queue.shift();\r\n                this.logMsgIfDebug(() => console.info('Queue is full, the oldest event is dropped.'));\r\n            }\r\n            queue.push({ message });\r\n            this.setPersistedProperty(PostHogPersistedProperty.Queue, queue);\r\n            this._events.emit(type, message);\r\n            // Flush queued events if we meet the flushAt length\r\n            if (queue.length >= this.flushAt) {\r\n                this.flushBackground();\r\n            }\r\n            if (this.flushInterval && !this._flushTimer) {\r\n                this._flushTimer = safeSetTimeout(() => this.flushBackground(), this.flushInterval);\r\n            }\r\n        });\r\n    }\r\n    async sendImmediate(type, _message, options) {\r\n        if (this.disabled) {\r\n            this.logMsgIfDebug(() => console.warn('[PostHog] The client is disabled'));\r\n            return;\r\n        }\r\n        if (!this._isInitialized) {\r\n            await this._initPromise;\r\n        }\r\n        if (this.optedOut) {\r\n            this._events.emit(type, `Library is disabled. Not sending event. To re-enable, call posthog.optIn()`);\r\n            return;\r\n        }\r\n        const data = {\r\n            api_key: this.apiKey,\r\n            batch: [this.prepareMessage(type, _message, options)],\r\n            sent_at: currentISOTime(),\r\n        };\r\n        if (this.historicalMigration) {\r\n            data.historical_migration = true;\r\n        }\r\n        const payload = JSON.stringify(data);\r\n        const url = `${this.host}/batch/`;\r\n        const gzippedPayload = !this.disableCompression ? await gzipCompress(payload, this.isDebug) : null;\r\n        const fetchOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n                ...this.getCustomHeaders(),\r\n                'Content-Type': 'application/json',\r\n                ...(gzippedPayload !== null && { 'Content-Encoding': 'gzip' }),\r\n            },\r\n            body: gzippedPayload || payload,\r\n        };\r\n        try {\r\n            await this.fetchWithRetry(url, fetchOptions);\r\n        }\r\n        catch (err) {\r\n            this._events.emit('error', err);\r\n        }\r\n    }\r\n    prepareMessage(type, _message, options) {\r\n        const message = {\r\n            ..._message,\r\n            type: type,\r\n            library: this.getLibraryId(),\r\n            library_version: this.getLibraryVersion(),\r\n            timestamp: options?.timestamp ? options?.timestamp : currentISOTime(),\r\n            uuid: options?.uuid ? options.uuid : uuidv7(),\r\n        };\r\n        const addGeoipDisableProperty = options?.disableGeoip ?? this.disableGeoip;\r\n        if (addGeoipDisableProperty) {\r\n            if (!message.properties) {\r\n                message.properties = {};\r\n            }\r\n            message['properties']['$geoip_disable'] = true;\r\n        }\r\n        if (message.distinctId) {\r\n            message.distinct_id = message.distinctId;\r\n            delete message.distinctId;\r\n        }\r\n        return message;\r\n    }\r\n    clearFlushTimer() {\r\n        if (this._flushTimer) {\r\n            clearTimeout(this._flushTimer);\r\n            this._flushTimer = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Helper for flushing the queue in the background\r\n     * Avoids unnecessary promise errors\r\n     */\r\n    flushBackground() {\r\n        void this.flush().catch(async (err) => {\r\n            await logFlushError(err);\r\n        });\r\n    }\r\n    /**\r\n     * Flushes the queue\r\n     *\r\n     * This function will return a promise that will resolve when the flush is complete,\r\n     * or reject if there was an error (for example if the server or network is down).\r\n     *\r\n     * If there is already a flush in progress, this function will wait for that flush to complete.\r\n     *\r\n     * It's recommended to do error handling in the callback of the promise.\r\n     *\r\n     * @example\r\n     * posthog.flush().then(() => {\r\n     *   console.log('Flush complete')\r\n     * }).catch((err) => {\r\n     *   console.error('Flush failed', err)\r\n     * })\r\n     *\r\n     *\r\n     * @throws PostHogFetchHttpError\r\n     * @throws PostHogFetchNetworkError\r\n     * @throws Error\r\n     */\r\n    async flush() {\r\n        // Wait for the current flush operation to finish (regardless of success or failure), then try to flush again.\r\n        // Use allSettled instead of finally to be defensive around flush throwing errors immediately rather than rejecting.\r\n        // Use a custom allSettled implementation to avoid issues with patching Promise on RN\r\n        const nextFlushPromise = allSettled([this.flushPromise]).then(() => {\r\n            return this._flush();\r\n        });\r\n        this.flushPromise = nextFlushPromise;\r\n        void this.addPendingPromise(nextFlushPromise);\r\n        allSettled([nextFlushPromise]).then(() => {\r\n            // If there are no others waiting to flush, clear the promise.\r\n            // We don't strictly need to do this, but it could make debugging easier\r\n            if (this.flushPromise === nextFlushPromise) {\r\n                this.flushPromise = null;\r\n            }\r\n        });\r\n        return nextFlushPromise;\r\n    }\r\n    getCustomHeaders() {\r\n        // Don't set the user agent if we're not on a browser. The latest spec allows\r\n        // the User-Agent header (see https://fetch.spec.whatwg.org/#terminology-headers\r\n        // and https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader),\r\n        // but browsers such as Chrome and Safari have not caught up.\r\n        const customUserAgent = this.getCustomUserAgent();\r\n        const headers = {};\r\n        if (customUserAgent && customUserAgent !== '') {\r\n            headers['User-Agent'] = customUserAgent;\r\n        }\r\n        return headers;\r\n    }\r\n    async _flush() {\r\n        this.clearFlushTimer();\r\n        await this._initPromise;\r\n        let queue = this.getPersistedProperty(PostHogPersistedProperty.Queue) || [];\r\n        if (!queue.length) {\r\n            return;\r\n        }\r\n        const sentMessages = [];\r\n        const originalQueueLength = queue.length;\r\n        while (queue.length > 0 && sentMessages.length < originalQueueLength) {\r\n            const batchItems = queue.slice(0, this.maxBatchSize);\r\n            const batchMessages = batchItems.map((item) => item.message);\r\n            const persistQueueChange = () => {\r\n                const refreshedQueue = this.getPersistedProperty(PostHogPersistedProperty.Queue) || [];\r\n                const newQueue = refreshedQueue.slice(batchItems.length);\r\n                this.setPersistedProperty(PostHogPersistedProperty.Queue, newQueue);\r\n                queue = newQueue;\r\n            };\r\n            const data = {\r\n                api_key: this.apiKey,\r\n                batch: batchMessages,\r\n                sent_at: currentISOTime(),\r\n            };\r\n            if (this.historicalMigration) {\r\n                data.historical_migration = true;\r\n            }\r\n            const payload = JSON.stringify(data);\r\n            const url = `${this.host}/batch/`;\r\n            const gzippedPayload = !this.disableCompression ? await gzipCompress(payload, this.isDebug) : null;\r\n            const fetchOptions = {\r\n                method: 'POST',\r\n                headers: {\r\n                    ...this.getCustomHeaders(),\r\n                    'Content-Type': 'application/json',\r\n                    ...(gzippedPayload !== null && { 'Content-Encoding': 'gzip' }),\r\n                },\r\n                body: gzippedPayload || payload,\r\n            };\r\n            const retryOptions = {\r\n                retryCheck: (err) => {\r\n                    // don't automatically retry on 413 errors, we want to reduce the batch size first\r\n                    if (isPostHogFetchContentTooLargeError(err)) {\r\n                        return false;\r\n                    }\r\n                    // otherwise, retry on network errors\r\n                    return isPostHogFetchError(err);\r\n                },\r\n            };\r\n            try {\r\n                await this.fetchWithRetry(url, fetchOptions, retryOptions);\r\n            }\r\n            catch (err) {\r\n                if (isPostHogFetchContentTooLargeError(err) && batchMessages.length > 1) {\r\n                    // if we get a 413 error, we want to reduce the batch size and try again\r\n                    this.maxBatchSize = Math.max(1, Math.floor(batchMessages.length / 2));\r\n                    this.logMsgIfDebug(() => console.warn(`Received 413 when sending batch of size ${batchMessages.length}, reducing batch size to ${this.maxBatchSize}`));\r\n                    // do not persist the queue change, we want to retry the same batch\r\n                    continue;\r\n                }\r\n                // depending on the error type, eg a malformed JSON or broken queue, it'll always return an error\r\n                // and this will be an endless loop, in this case, if the error isn't a network issue, we always remove the items from the queue\r\n                if (!(err instanceof PostHogFetchNetworkError)) {\r\n                    persistQueueChange();\r\n                }\r\n                this._events.emit('error', err);\r\n                throw err;\r\n            }\r\n            persistQueueChange();\r\n            sentMessages.push(...batchMessages);\r\n        }\r\n        this._events.emit('flush', sentMessages);\r\n    }\r\n    async fetchWithRetry(url, options, retryOptions, requestTimeout) {\r\n        var _a;\r\n        (_a = AbortSignal).timeout ?? (_a.timeout = function timeout(ms) {\r\n            const ctrl = new AbortController();\r\n            setTimeout(() => ctrl.abort(), ms);\r\n            return ctrl.signal;\r\n        });\r\n        const body = options.body ? options.body : '';\r\n        let reqByteLength = -1;\r\n        try {\r\n            if (body instanceof Blob) {\r\n                reqByteLength = body.size;\r\n            }\r\n            else {\r\n                reqByteLength = Buffer.byteLength(body, STRING_FORMAT);\r\n            }\r\n        }\r\n        catch {\r\n            if (body instanceof Blob) {\r\n                reqByteLength = body.size;\r\n            }\r\n            else {\r\n                const encoded = new TextEncoder().encode(body);\r\n                reqByteLength = encoded.length;\r\n            }\r\n        }\r\n        return await retriable(async () => {\r\n            let res = null;\r\n            try {\r\n                res = await this.fetch(url, {\r\n                    signal: AbortSignal.timeout(requestTimeout ?? this.requestTimeout),\r\n                    ...options,\r\n                });\r\n            }\r\n            catch (e) {\r\n                // fetch will only throw on network errors or on timeouts\r\n                throw new PostHogFetchNetworkError(e);\r\n            }\r\n            // If we're in no-cors mode, we can't access the response status\r\n            // We only throw on HTTP errors if we're not in no-cors mode\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#no-cors\r\n            const isNoCors = options.mode === 'no-cors';\r\n            if (!isNoCors && (res.status < 200 || res.status >= 400)) {\r\n                throw new PostHogFetchHttpError(res, reqByteLength);\r\n            }\r\n            return res;\r\n        }, { ...this._retryOptions, ...retryOptions });\r\n    }\r\n    async _shutdown(shutdownTimeoutMs = 30000) {\r\n        // A little tricky - we want to have a max shutdown time and enforce it, even if that means we have some\r\n        // dangling promises. We'll keep track of the timeout and resolve/reject based on that.\r\n        await this._initPromise;\r\n        let hasTimedOut = false;\r\n        this.clearFlushTimer();\r\n        const doShutdown = async () => {\r\n            try {\r\n                await Promise.all(Object.values(this.pendingPromises));\r\n                while (true) {\r\n                    const queue = this.getPersistedProperty(PostHogPersistedProperty.Queue) || [];\r\n                    if (queue.length === 0) {\r\n                        break;\r\n                    }\r\n                    // flush again to make sure we send all events, some of which might've been added\r\n                    // while we were waiting for the pending promises to resolve\r\n                    // For example, see sendFeatureFlags in posthog-node/src/posthog-node.ts::capture\r\n                    await this.flush();\r\n                    if (hasTimedOut) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (!isPostHogFetchError(e)) {\r\n                    throw e;\r\n                }\r\n                await logFlushError(e);\r\n            }\r\n        };\r\n        return Promise.race([\r\n            new Promise((_, reject) => {\r\n                safeSetTimeout(() => {\r\n                    this.logMsgIfDebug(() => console.error('Timed out while shutting down PostHog'));\r\n                    hasTimedOut = true;\r\n                    reject('Timeout while shutting down PostHog. Some events may not have been sent.');\r\n                }, shutdownTimeoutMs);\r\n            }),\r\n            doShutdown(),\r\n        ]);\r\n    }\r\n    /**\r\n     *  Call shutdown() once before the node process exits, so ensure that all events have been sent and all promises\r\n     *  have resolved. Do not use this function if you intend to keep using this PostHog instance after calling it.\r\n     * @param shutdownTimeoutMs\r\n     */\r\n    async shutdown(shutdownTimeoutMs = 30000) {\r\n        if (this.shutdownPromise) {\r\n            this.logMsgIfDebug(() => console.warn('shutdown() called while already shutting down. shutdown() is meant to be called once before process exit - use flush() for per-request cleanup'));\r\n        }\r\n        else {\r\n            this.shutdownPromise = this._shutdown(shutdownTimeoutMs).finally(() => {\r\n                this.shutdownPromise = null;\r\n            });\r\n        }\r\n        return this.shutdownPromise;\r\n    }\r\n}\n\n/**\r\n * A lazy value that is only computed when needed. Inspired by C#'s Lazy<T> class.\r\n */\nclass Lazy {\n  constructor(factory) {\n    this.factory = factory;\n  }\n  /**\r\n   * Gets the value, initializing it if necessary.\r\n   * Multiple concurrent calls will share the same initialization promise.\r\n   */\n  async getValue() {\n    if (this.value !== undefined) {\n      return this.value;\n    }\n    if (this.initializationPromise === undefined) {\n      this.initializationPromise = (async () => {\n        try {\n          const result = await this.factory();\n          this.value = result;\n          return result;\n        } finally {\n          // Clear the promise so we can retry if needed\n          this.initializationPromise = undefined;\n        }\n      })();\n    }\n    return this.initializationPromise;\n  }\n  /**\r\n   * Returns true if the value has been initialized.\r\n   */\n  isInitialized() {\n    return this.value !== undefined;\n  }\n  /**\r\n   * Returns a promise that resolves when the value is initialized.\r\n   * If already initialized, resolves immediately.\r\n   */\n  async waitForInitialization() {\n    if (this.isInitialized()) {\n      return;\n    }\n    await this.getValue();\n  }\n}\n\n/// <reference lib=\"dom\" />\nconst nodeCrypto = new Lazy(async () => {\n  try {\n    return await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"crypto\", 19));\n  } catch {\n    return undefined;\n  }\n});\nasync function getNodeCrypto() {\n  return await nodeCrypto.getValue();\n}\nconst webCrypto = new Lazy(async () => {\n  if (typeof globalThis.crypto?.subtle !== 'undefined') {\n    return globalThis.crypto.subtle;\n  }\n  try {\n    // Node.js: use built-in webcrypto and assign it if needed\n    const crypto = await nodeCrypto.getValue();\n    if (crypto?.webcrypto?.subtle) {\n      return crypto.webcrypto.subtle;\n    }\n  } catch {\n    // Ignore if not available\n  }\n  return undefined;\n});\nasync function getWebCrypto() {\n  return await webCrypto.getValue();\n}\n\n/// <reference lib=\"dom\" />\nasync function hashSHA1(text) {\n  // Try Node.js crypto first\n  const nodeCrypto = await getNodeCrypto();\n  if (nodeCrypto) {\n    return nodeCrypto.createHash('sha1').update(text).digest('hex');\n  }\n  const webCrypto = await getWebCrypto();\n  // Fall back to Web Crypto API\n  if (webCrypto) {\n    const hashBuffer = await webCrypto.digest('SHA-1', new TextEncoder().encode(text));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n  }\n  throw new Error('No crypto implementation available. Tried Node Crypto API and Web SubtleCrypto API');\n}\n\nconst SIXTY_SECONDS = 60 * 1000;\n// eslint-disable-next-line\nconst LONG_SCALE = 0xfffffffffffffff;\nconst NULL_VALUES_ALLOWED_OPERATORS = ['is_not'];\nclass ClientError extends Error {\n  constructor(message) {\n    super();\n    Error.captureStackTrace(this, this.constructor);\n    this.name = 'ClientError';\n    this.message = message;\n    Object.setPrototypeOf(this, ClientError.prototype);\n  }\n}\nclass InconclusiveMatchError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n    // instanceof doesn't work in ES3 or ES5\n    // https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript/\n    // this is the workaround\n    Object.setPrototypeOf(this, InconclusiveMatchError.prototype);\n  }\n}\nclass FeatureFlagsPoller {\n  constructor({\n    pollingInterval,\n    personalApiKey,\n    projectApiKey,\n    timeout,\n    host,\n    customHeaders,\n    ...options\n  }) {\n    this.debugMode = false;\n    this.shouldBeginExponentialBackoff = false;\n    this.backOffCount = 0;\n    this.pollingInterval = pollingInterval;\n    this.personalApiKey = personalApiKey;\n    this.featureFlags = [];\n    this.featureFlagsByKey = {};\n    this.groupTypeMapping = {};\n    this.cohorts = {};\n    this.loadedSuccessfullyOnce = false;\n    this.timeout = timeout;\n    this.projectApiKey = projectApiKey;\n    this.host = host;\n    this.poller = undefined;\n    this.fetch = options.fetch || fetch;\n    this.onError = options.onError;\n    this.customHeaders = customHeaders;\n    this.onLoad = options.onLoad;\n    void this.loadFeatureFlags();\n  }\n  debug(enabled = true) {\n    this.debugMode = enabled;\n  }\n  logMsgIfDebug(fn) {\n    if (this.debugMode) {\n      fn();\n    }\n  }\n  async getFeatureFlag(key, distinctId, groups = {}, personProperties = {}, groupProperties = {}) {\n    await this.loadFeatureFlags();\n    let response = undefined;\n    let featureFlag = undefined;\n    if (!this.loadedSuccessfullyOnce) {\n      return response;\n    }\n    featureFlag = this.featureFlagsByKey[key];\n    if (featureFlag !== undefined) {\n      try {\n        response = await this.computeFlagLocally(featureFlag, distinctId, groups, personProperties, groupProperties);\n        this.logMsgIfDebug(() => console.debug(`Successfully computed flag locally: ${key} -> ${response}`));\n      } catch (e) {\n        if (e instanceof InconclusiveMatchError) {\n          this.logMsgIfDebug(() => console.debug(`InconclusiveMatchError when computing flag locally: ${key}: ${e}`));\n        } else if (e instanceof Error) {\n          this.onError?.(new Error(`Error computing flag locally: ${key}: ${e}`));\n        }\n      }\n    }\n    return response;\n  }\n  async computeFeatureFlagPayloadLocally(key, matchValue) {\n    await this.loadFeatureFlags();\n    let response = undefined;\n    if (!this.loadedSuccessfullyOnce) {\n      return undefined;\n    }\n    if (typeof matchValue == 'boolean') {\n      response = this.featureFlagsByKey?.[key]?.filters?.payloads?.[matchValue.toString()];\n    } else if (typeof matchValue == 'string') {\n      response = this.featureFlagsByKey?.[key]?.filters?.payloads?.[matchValue];\n    }\n    // Undefined means a loading or missing data issue. Null means evaluation happened and there was no match\n    if (response === undefined || response === null) {\n      return null;\n    }\n    try {\n      return JSON.parse(response);\n    } catch {\n      return response;\n    }\n  }\n  async getAllFlagsAndPayloads(distinctId, groups = {}, personProperties = {}, groupProperties = {}, flagKeysToExplicitlyEvaluate) {\n    await this.loadFeatureFlags();\n    const response = {};\n    const payloads = {};\n    let fallbackToFlags = this.featureFlags.length == 0;\n    const flagsToEvaluate = flagKeysToExplicitlyEvaluate ? flagKeysToExplicitlyEvaluate.map(key => this.featureFlagsByKey[key]).filter(Boolean) : this.featureFlags;\n    await Promise.all(flagsToEvaluate.map(async flag => {\n      try {\n        const matchValue = await this.computeFlagLocally(flag, distinctId, groups, personProperties, groupProperties);\n        response[flag.key] = matchValue;\n        const matchPayload = await this.computeFeatureFlagPayloadLocally(flag.key, matchValue);\n        if (matchPayload) {\n          payloads[flag.key] = matchPayload;\n        }\n      } catch (e) {\n        if (e instanceof InconclusiveMatchError) {\n          this.logMsgIfDebug(() => console.debug(`InconclusiveMatchError when computing flag locally: ${flag.key}: ${e}`));\n        } else if (e instanceof Error) {\n          this.onError?.(new Error(`Error computing flag locally: ${flag.key}: ${e}`));\n        }\n        fallbackToFlags = true;\n      }\n    }));\n    return {\n      response,\n      payloads,\n      fallbackToFlags\n    };\n  }\n  async computeFlagLocally(flag, distinctId, groups = {}, personProperties = {}, groupProperties = {}) {\n    if (flag.ensure_experience_continuity) {\n      throw new InconclusiveMatchError('Flag has experience continuity enabled');\n    }\n    if (!flag.active) {\n      return false;\n    }\n    const flagFilters = flag.filters || {};\n    const aggregation_group_type_index = flagFilters.aggregation_group_type_index;\n    if (aggregation_group_type_index != undefined) {\n      const groupName = this.groupTypeMapping[String(aggregation_group_type_index)];\n      if (!groupName) {\n        this.logMsgIfDebug(() => console.warn(`[FEATURE FLAGS] Unknown group type index ${aggregation_group_type_index} for feature flag ${flag.key}`));\n        throw new InconclusiveMatchError('Flag has unknown group type index');\n      }\n      if (!(groupName in groups)) {\n        this.logMsgIfDebug(() => console.warn(`[FEATURE FLAGS] Can't compute group feature flag: ${flag.key} without group names passed in`));\n        return false;\n      }\n      const focusedGroupProperties = groupProperties[groupName];\n      return await this.matchFeatureFlagProperties(flag, groups[groupName], focusedGroupProperties);\n    } else {\n      return await this.matchFeatureFlagProperties(flag, distinctId, personProperties);\n    }\n  }\n  async matchFeatureFlagProperties(flag, distinctId, properties) {\n    const flagFilters = flag.filters || {};\n    const flagConditions = flagFilters.groups || [];\n    let isInconclusive = false;\n    let result = undefined;\n    // # Stable sort conditions with variant overrides to the top. This ensures that if overrides are present, they are\n    // # evaluated first, and the variant override is applied to the first matching condition.\n    const sortedFlagConditions = [...flagConditions].sort((conditionA, conditionB) => {\n      const AHasVariantOverride = !!conditionA.variant;\n      const BHasVariantOverride = !!conditionB.variant;\n      if (AHasVariantOverride && BHasVariantOverride) {\n        return 0;\n      } else if (AHasVariantOverride) {\n        return -1;\n      } else if (BHasVariantOverride) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    for (const condition of sortedFlagConditions) {\n      try {\n        if (await this.isConditionMatch(flag, distinctId, condition, properties)) {\n          const variantOverride = condition.variant;\n          const flagVariants = flagFilters.multivariate?.variants || [];\n          if (variantOverride && flagVariants.some(variant => variant.key === variantOverride)) {\n            result = variantOverride;\n          } else {\n            result = (await this.getMatchingVariant(flag, distinctId)) || true;\n          }\n          break;\n        }\n      } catch (e) {\n        if (e instanceof InconclusiveMatchError) {\n          isInconclusive = true;\n        } else {\n          throw e;\n        }\n      }\n    }\n    if (result !== undefined) {\n      return result;\n    } else if (isInconclusive) {\n      throw new InconclusiveMatchError(\"Can't determine if feature flag is enabled or not with given properties\");\n    }\n    // We can only return False when all conditions are False\n    return false;\n  }\n  async isConditionMatch(flag, distinctId, condition, properties) {\n    const rolloutPercentage = condition.rollout_percentage;\n    const warnFunction = msg => {\n      this.logMsgIfDebug(() => console.warn(msg));\n    };\n    if ((condition.properties || []).length > 0) {\n      for (const prop of condition.properties) {\n        const propertyType = prop.type;\n        let matches = false;\n        if (propertyType === 'cohort') {\n          matches = matchCohort(prop, properties, this.cohorts, this.debugMode);\n        } else if (propertyType === 'flag') {\n          this.logMsgIfDebug(() => console.warn(`[FEATURE FLAGS] Flag dependency filters are not supported in local evaluation. ` + `Skipping condition for flag '${flag.key}' with dependency on flag '${prop.key || 'unknown'}'`));\n          continue;\n        } else {\n          matches = matchProperty(prop, properties, warnFunction);\n        }\n        if (!matches) {\n          return false;\n        }\n      }\n      if (rolloutPercentage == undefined) {\n        return true;\n      }\n    }\n    if (rolloutPercentage != undefined && (await _hash(flag.key, distinctId)) > rolloutPercentage / 100.0) {\n      return false;\n    }\n    return true;\n  }\n  async getMatchingVariant(flag, distinctId) {\n    const hashValue = await _hash(flag.key, distinctId, 'variant');\n    const matchingVariant = this.variantLookupTable(flag).find(variant => {\n      return hashValue >= variant.valueMin && hashValue < variant.valueMax;\n    });\n    if (matchingVariant) {\n      return matchingVariant.key;\n    }\n    return undefined;\n  }\n  variantLookupTable(flag) {\n    const lookupTable = [];\n    let valueMin = 0;\n    let valueMax = 0;\n    const flagFilters = flag.filters || {};\n    const multivariates = flagFilters.multivariate?.variants || [];\n    multivariates.forEach(variant => {\n      valueMax = valueMin + variant.rollout_percentage / 100.0;\n      lookupTable.push({\n        valueMin,\n        valueMax,\n        key: variant.key\n      });\n      valueMin = valueMax;\n    });\n    return lookupTable;\n  }\n  async loadFeatureFlags(forceReload = false) {\n    if (!this.loadedSuccessfullyOnce || forceReload) {\n      await this._loadFeatureFlags();\n    }\n  }\n  /**\r\n   * Returns true if the feature flags poller has loaded successfully at least once and has more than 0 feature flags.\r\n   * This is useful to check if local evaluation is ready before calling getFeatureFlag.\r\n   */\n  isLocalEvaluationReady() {\n    return (this.loadedSuccessfullyOnce ?? false) && (this.featureFlags?.length ?? 0) > 0;\n  }\n  /**\r\n   * If a client is misconfigured with an invalid or improper API key, the polling interval is doubled each time\r\n   * until a successful request is made, up to a maximum of 60 seconds.\r\n   *\r\n   * @returns The polling interval to use for the next request.\r\n   */\n  getPollingInterval() {\n    if (!this.shouldBeginExponentialBackoff) {\n      return this.pollingInterval;\n    }\n    return Math.min(SIXTY_SECONDS, this.pollingInterval * 2 ** this.backOffCount);\n  }\n  async _loadFeatureFlags() {\n    if (this.poller) {\n      clearTimeout(this.poller);\n      this.poller = undefined;\n    }\n    this.poller = setTimeout(() => this._loadFeatureFlags(), this.getPollingInterval());\n    try {\n      const res = await this._requestFeatureFlagDefinitions();\n      // Handle undefined res case, this shouldn't happen, but it doesn't hurt to handle it anyway\n      if (!res) {\n        // Don't override existing flags when something goes wrong\n        return;\n      }\n      // NB ON ERROR HANDLING & `loadedSuccessfullyOnce`:\n      //\n      // `loadedSuccessfullyOnce` indicates we've successfully loaded a valid set of flags at least once.\n      // If we set it to `true` in an error scenario (e.g. 402 Over Quota, 401 Invalid Key, etc.),\n      // any manual call to `loadFeatureFlags()` (without forceReload) will skip refetching entirely,\n      // leaving us stuck with zero or outdated flags. The poller does keep running, but we also want\n      // manual reloads to be possible as soon as the error condition is resolved.\n      //\n      // Therefore, on error statuses, we do *not* set `loadedSuccessfullyOnce = true`, ensuring that\n      // both the background poller and any subsequent manual calls can keep trying to load flags\n      // once the issue (quota, permission, rate limit, etc.) is resolved.\n      switch (res.status) {\n        case 401:\n          // Invalid API key\n          this.shouldBeginExponentialBackoff = true;\n          this.backOffCount += 1;\n          throw new ClientError(`Your project key or personal API key is invalid. Setting next polling interval to ${this.getPollingInterval()}ms. More information: https://posthog.com/docs/api#rate-limiting`);\n        case 402:\n          // Quota exceeded - clear all flags\n          console.warn('[FEATURE FLAGS] Feature flags quota limit exceeded - unsetting all local flags. Learn more about billing limits at https://posthog.com/docs/billing/limits-alerts');\n          this.featureFlags = [];\n          this.featureFlagsByKey = {};\n          this.groupTypeMapping = {};\n          this.cohorts = {};\n          return;\n        case 403:\n          // Permissions issue\n          this.shouldBeginExponentialBackoff = true;\n          this.backOffCount += 1;\n          throw new ClientError(`Your personal API key does not have permission to fetch feature flag definitions for local evaluation. Setting next polling interval to ${this.getPollingInterval()}ms. Are you sure you're using the correct personal and Project API key pair? More information: https://posthog.com/docs/api/overview`);\n        case 429:\n          // Rate limited\n          this.shouldBeginExponentialBackoff = true;\n          this.backOffCount += 1;\n          throw new ClientError(`You are being rate limited. Setting next polling interval to ${this.getPollingInterval()}ms. More information: https://posthog.com/docs/api#rate-limiting`);\n        case 200:\n          {\n            // Process successful response\n            const responseJson = (await res.json()) ?? {};\n            if (!('flags' in responseJson)) {\n              this.onError?.(new Error(`Invalid response when getting feature flags: ${JSON.stringify(responseJson)}`));\n              return;\n            }\n            this.featureFlags = responseJson.flags ?? [];\n            this.featureFlagsByKey = this.featureFlags.reduce((acc, curr) => (acc[curr.key] = curr, acc), {});\n            this.groupTypeMapping = responseJson.group_type_mapping || {};\n            this.cohorts = responseJson.cohorts || {};\n            this.loadedSuccessfullyOnce = true;\n            this.shouldBeginExponentialBackoff = false;\n            this.backOffCount = 0;\n            this.onLoad?.(this.featureFlags.length);\n            break;\n          }\n        default:\n          // Something else went wrong, or the server is down.\n          // In this case, don't override existing flags\n          return;\n      }\n    } catch (err) {\n      if (err instanceof ClientError) {\n        this.onError?.(err);\n      }\n    }\n  }\n  getPersonalApiKeyRequestOptions(method = 'GET') {\n    return {\n      method,\n      headers: {\n        ...this.customHeaders,\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.personalApiKey}`\n      }\n    };\n  }\n  async _requestFeatureFlagDefinitions() {\n    const url = `${this.host}/api/feature_flag/local_evaluation?token=${this.projectApiKey}&send_cohorts`;\n    const options = this.getPersonalApiKeyRequestOptions();\n    let abortTimeout = null;\n    if (this.timeout && typeof this.timeout === 'number') {\n      const controller = new AbortController();\n      abortTimeout = safeSetTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n      options.signal = controller.signal;\n    }\n    try {\n      return await this.fetch(url, options);\n    } finally {\n      clearTimeout(abortTimeout);\n    }\n  }\n  stopPoller() {\n    clearTimeout(this.poller);\n  }\n}\n// # This function takes a distinct_id and a feature flag key and returns a float between 0 and 1.\n// # Given the same distinct_id and key, it'll always return the same float. These floats are\n// # uniformly distributed between 0 and 1, so if we want to show this feature to 20% of traffic\n// # we can do _hash(key, distinct_id) < 0.2\nasync function _hash(key, distinctId, salt = '') {\n  const hashString = await hashSHA1(`${key}.${distinctId}${salt}`);\n  return parseInt(hashString.slice(0, 15), 16) / LONG_SCALE;\n}\nfunction matchProperty(property, propertyValues, warnFunction) {\n  const key = property.key;\n  const value = property.value;\n  const operator = property.operator || 'exact';\n  if (!(key in propertyValues)) {\n    throw new InconclusiveMatchError(`Property ${key} not found in propertyValues`);\n  } else if (operator === 'is_not_set') {\n    throw new InconclusiveMatchError(`Operator is_not_set is not supported`);\n  }\n  const overrideValue = propertyValues[key];\n  if (overrideValue == null && !NULL_VALUES_ALLOWED_OPERATORS.includes(operator)) {\n    // if the value is null, just fail the feature flag comparison\n    // this isn't an InconclusiveMatchError because the property value was provided.\n    if (warnFunction) {\n      warnFunction(`Property ${key} cannot have a value of null/undefined with the ${operator} operator`);\n    }\n    return false;\n  }\n  function computeExactMatch(value, overrideValue) {\n    if (Array.isArray(value)) {\n      return value.map(val => String(val).toLowerCase()).includes(String(overrideValue).toLowerCase());\n    }\n    return String(value).toLowerCase() === String(overrideValue).toLowerCase();\n  }\n  function compare(lhs, rhs, operator) {\n    if (operator === 'gt') {\n      return lhs > rhs;\n    } else if (operator === 'gte') {\n      return lhs >= rhs;\n    } else if (operator === 'lt') {\n      return lhs < rhs;\n    } else if (operator === 'lte') {\n      return lhs <= rhs;\n    } else {\n      throw new Error(`Invalid operator: ${operator}`);\n    }\n  }\n  switch (operator) {\n    case 'exact':\n      return computeExactMatch(value, overrideValue);\n    case 'is_not':\n      return !computeExactMatch(value, overrideValue);\n    case 'is_set':\n      return key in propertyValues;\n    case 'icontains':\n      return String(overrideValue).toLowerCase().includes(String(value).toLowerCase());\n    case 'not_icontains':\n      return !String(overrideValue).toLowerCase().includes(String(value).toLowerCase());\n    case 'regex':\n      return isValidRegex(String(value)) && String(overrideValue).match(String(value)) !== null;\n    case 'not_regex':\n      return isValidRegex(String(value)) && String(overrideValue).match(String(value)) === null;\n    case 'gt':\n    case 'gte':\n    case 'lt':\n    case 'lte':\n      {\n        // :TRICKY: We adjust comparison based on the override value passed in,\n        // to make sure we handle both numeric and string comparisons appropriately.\n        let parsedValue = typeof value === 'number' ? value : null;\n        if (typeof value === 'string') {\n          try {\n            parsedValue = parseFloat(value);\n          } catch (err) {\n            // pass\n          }\n        }\n        if (parsedValue != null && overrideValue != null) {\n          // check both null and undefined\n          if (typeof overrideValue === 'string') {\n            return compare(overrideValue, String(value), operator);\n          } else {\n            return compare(overrideValue, parsedValue, operator);\n          }\n        } else {\n          return compare(String(overrideValue), String(value), operator);\n        }\n      }\n    case 'is_date_after':\n    case 'is_date_before':\n      {\n        let parsedDate = relativeDateParseForFeatureFlagMatching(String(value));\n        if (parsedDate == null) {\n          parsedDate = convertToDateTime(value);\n        }\n        if (parsedDate == null) {\n          throw new InconclusiveMatchError(`Invalid date: ${value}`);\n        }\n        const overrideDate = convertToDateTime(overrideValue);\n        if (['is_date_before'].includes(operator)) {\n          return overrideDate < parsedDate;\n        }\n        return overrideDate > parsedDate;\n      }\n    default:\n      throw new InconclusiveMatchError(`Unknown operator: ${operator}`);\n  }\n}\nfunction matchCohort(property, propertyValues, cohortProperties, debugMode = false) {\n  const cohortId = String(property.value);\n  if (!(cohortId in cohortProperties)) {\n    throw new InconclusiveMatchError(\"can't match cohort without a given cohort property value\");\n  }\n  const propertyGroup = cohortProperties[cohortId];\n  return matchPropertyGroup(propertyGroup, propertyValues, cohortProperties, debugMode);\n}\nfunction matchPropertyGroup(propertyGroup, propertyValues, cohortProperties, debugMode = false) {\n  if (!propertyGroup) {\n    return true;\n  }\n  const propertyGroupType = propertyGroup.type;\n  const properties = propertyGroup.values;\n  if (!properties || properties.length === 0) {\n    // empty groups are no-ops, always match\n    return true;\n  }\n  let errorMatchingLocally = false;\n  if ('values' in properties[0]) {\n    // a nested property group\n    for (const prop of properties) {\n      try {\n        const matches = matchPropertyGroup(prop, propertyValues, cohortProperties, debugMode);\n        if (propertyGroupType === 'AND') {\n          if (!matches) {\n            return false;\n          }\n        } else {\n          // OR group\n          if (matches) {\n            return true;\n          }\n        }\n      } catch (err) {\n        if (err instanceof InconclusiveMatchError) {\n          if (debugMode) {\n            console.debug(`Failed to compute property ${prop} locally: ${err}`);\n          }\n          errorMatchingLocally = true;\n        } else {\n          throw err;\n        }\n      }\n    }\n    if (errorMatchingLocally) {\n      throw new InconclusiveMatchError(\"Can't match cohort without a given cohort property value\");\n    }\n    // if we get here, all matched in AND case, or none matched in OR case\n    return propertyGroupType === 'AND';\n  } else {\n    for (const prop of properties) {\n      try {\n        let matches;\n        if (prop.type === 'cohort') {\n          matches = matchCohort(prop, propertyValues, cohortProperties, debugMode);\n        } else if (prop.type === 'flag') {\n          if (debugMode) {\n            console.warn(`[FEATURE FLAGS] Flag dependency filters are not supported in local evaluation. ` + `Skipping condition with dependency on flag '${prop.key || 'unknown'}'`);\n          }\n          continue;\n        } else {\n          matches = matchProperty(prop, propertyValues);\n        }\n        const negation = prop.negation || false;\n        if (propertyGroupType === 'AND') {\n          // if negated property, do the inverse\n          if (!matches && !negation) {\n            return false;\n          }\n          if (matches && negation) {\n            return false;\n          }\n        } else {\n          // OR group\n          if (matches && !negation) {\n            return true;\n          }\n          if (!matches && negation) {\n            return true;\n          }\n        }\n      } catch (err) {\n        if (err instanceof InconclusiveMatchError) {\n          if (debugMode) {\n            console.debug(`Failed to compute property ${prop} locally: ${err}`);\n          }\n          errorMatchingLocally = true;\n        } else {\n          throw err;\n        }\n      }\n    }\n    if (errorMatchingLocally) {\n      throw new InconclusiveMatchError(\"can't match cohort without a given cohort property value\");\n    }\n    // if we get here, all matched in AND case, or none matched in OR case\n    return propertyGroupType === 'AND';\n  }\n}\nfunction isValidRegex(regex) {\n  try {\n    new RegExp(regex);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction convertToDateTime(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    const date = new Date(value);\n    if (!isNaN(date.valueOf())) {\n      return date;\n    }\n    throw new InconclusiveMatchError(`${value} is in an invalid date format`);\n  } else {\n    throw new InconclusiveMatchError(`The date provided ${value} must be a string, number, or date object`);\n  }\n}\nfunction relativeDateParseForFeatureFlagMatching(value) {\n  const regex = /^-?(?<number>[0-9]+)(?<interval>[a-z])$/;\n  const match = value.match(regex);\n  const parsedDt = new Date(new Date().toISOString());\n  if (match) {\n    if (!match.groups) {\n      return null;\n    }\n    const number = parseInt(match.groups['number']);\n    if (number >= 10000) {\n      // Guard against overflow, disallow numbers greater than 10_000\n      return null;\n    }\n    const interval = match.groups['interval'];\n    if (interval == 'h') {\n      parsedDt.setUTCHours(parsedDt.getUTCHours() - number);\n    } else if (interval == 'd') {\n      parsedDt.setUTCDate(parsedDt.getUTCDate() - number);\n    } else if (interval == 'w') {\n      parsedDt.setUTCDate(parsedDt.getUTCDate() - number * 7);\n    } else if (interval == 'm') {\n      parsedDt.setUTCMonth(parsedDt.getUTCMonth() - number);\n    } else if (interval == 'y') {\n      parsedDt.setUTCFullYear(parsedDt.getUTCFullYear() - number);\n    } else {\n      return null;\n    }\n    return parsedDt;\n  } else {\n    return null;\n  }\n}\n\nclass PostHogMemoryStorage {\n  constructor() {\n    this._memoryStorage = {};\n  }\n  getProperty(key) {\n    return this._memoryStorage[key];\n  }\n  setProperty(key, value) {\n    this._memoryStorage[key] = value !== null ? value : undefined;\n  }\n}\n\n// Standard local evaluation rate limit is 600 per minute (10 per second),\n// so the fastest a poller should ever be set is 100ms.\nconst MINIMUM_POLLING_INTERVAL = 100;\nconst THIRTY_SECONDS = 30 * 1000;\nconst MAX_CACHE_SIZE = 50 * 1000;\n// The actual exported Nodejs API.\nclass PostHogBackendClient extends PostHogCoreStateless {\n  constructor(apiKey, options = {}) {\n    super(apiKey, options);\n    this._memoryStorage = new PostHogMemoryStorage();\n    this.options = options;\n    this.options.featureFlagsPollingInterval = typeof options.featureFlagsPollingInterval === 'number' ? Math.max(options.featureFlagsPollingInterval, MINIMUM_POLLING_INTERVAL) : THIRTY_SECONDS;\n    if (options.personalApiKey) {\n      if (options.personalApiKey.includes('phc_')) {\n        throw new Error('Your Personal API key is invalid. These keys are prefixed with \"phx_\" and can be created in PostHog project settings.');\n      }\n      // Only start the poller if local evaluation is enabled (defaults to true for backward compatibility)\n      const shouldEnableLocalEvaluation = options.enableLocalEvaluation !== false;\n      if (shouldEnableLocalEvaluation) {\n        this.featureFlagsPoller = new FeatureFlagsPoller({\n          pollingInterval: this.options.featureFlagsPollingInterval,\n          personalApiKey: options.personalApiKey,\n          projectApiKey: apiKey,\n          timeout: options.requestTimeout ?? 10000,\n          host: this.host,\n          fetch: options.fetch,\n          onError: err => {\n            this._events.emit('error', err);\n          },\n          onLoad: count => {\n            this._events.emit('localEvaluationFlagsLoaded', count);\n          },\n          customHeaders: this.getCustomHeaders()\n        });\n      }\n    }\n    this.errorTracking = new ErrorTracking(this, options);\n    this.distinctIdHasSentFlagCalls = {};\n    this.maxCacheSize = options.maxCacheSize || MAX_CACHE_SIZE;\n  }\n  getPersistedProperty(key) {\n    return this._memoryStorage.getProperty(key);\n  }\n  setPersistedProperty(key, value) {\n    return this._memoryStorage.setProperty(key, value);\n  }\n  fetch(url, options) {\n    return this.options.fetch ? this.options.fetch(url, options) : fetch(url, options);\n  }\n  getLibraryVersion() {\n    return version;\n  }\n  getCustomUserAgent() {\n    return `${this.getLibraryId()}/${this.getLibraryVersion()}`;\n  }\n  enable() {\n    return super.optIn();\n  }\n  disable() {\n    return super.optOut();\n  }\n  debug(enabled = true) {\n    super.debug(enabled);\n    this.featureFlagsPoller?.debug(enabled);\n  }\n  capture(props) {\n    if (typeof props === 'string') {\n      this.logMsgIfDebug(() => console.warn('Called capture() with a string as the first argument when an object was expected.'));\n    }\n    const {\n      distinctId,\n      event,\n      properties,\n      groups,\n      sendFeatureFlags,\n      timestamp,\n      disableGeoip,\n      uuid\n    } = props;\n    const _capture = props => {\n      super.captureStateless(distinctId, event, props, {\n        timestamp,\n        disableGeoip,\n        uuid\n      });\n    };\n    // :TRICKY: If we flush, or need to shut down, to not lose events we want this promise to resolve before we flush\n    const capturePromise = Promise.resolve().then(async () => {\n      if (sendFeatureFlags) {\n        // If we are sending feature flags, we evaluate them locally if the user prefers it, otherwise we fall back to remote evaluation\n        const sendFeatureFlagsOptions = typeof sendFeatureFlags === 'object' ? sendFeatureFlags : undefined;\n        return await this.getFeatureFlagsForEvent(distinctId, groups, disableGeoip, sendFeatureFlagsOptions);\n      }\n      if (event === '$feature_flag_called') {\n        // If we're capturing a $feature_flag_called event, we don't want to enrich the event with cached flags that may be out of date.\n        return {};\n      }\n      return {};\n    }).then(flags => {\n      // Derive the relevant flag properties to add\n      const additionalProperties = {};\n      if (flags) {\n        for (const [feature, variant] of Object.entries(flags)) {\n          additionalProperties[`$feature/${feature}`] = variant;\n        }\n      }\n      const activeFlags = Object.keys(flags || {}).filter(flag => flags?.[flag] !== false).sort();\n      if (activeFlags.length > 0) {\n        additionalProperties['$active_feature_flags'] = activeFlags;\n      }\n      return additionalProperties;\n    }).catch(() => {\n      // Something went wrong getting the flag info - we should capture the event anyways\n      return {};\n    }).then(additionalProperties => {\n      // No matter what - capture the event\n      _capture({\n        ...additionalProperties,\n        ...properties,\n        $groups: groups\n      });\n    });\n    this.addPendingPromise(capturePromise);\n  }\n  async captureImmediate(props) {\n    if (typeof props === 'string') {\n      this.logMsgIfDebug(() => console.warn('Called capture() with a string as the first argument when an object was expected.'));\n    }\n    const {\n      distinctId,\n      event,\n      properties,\n      groups,\n      sendFeatureFlags,\n      timestamp,\n      disableGeoip,\n      uuid\n    } = props;\n    const _capture = props => {\n      return super.captureStatelessImmediate(distinctId, event, props, {\n        timestamp,\n        disableGeoip,\n        uuid\n      });\n    };\n    const capturePromise = Promise.resolve().then(async () => {\n      if (sendFeatureFlags) {\n        // If we are sending feature flags, we evaluate them locally if the user prefers it, otherwise we fall back to remote evaluation\n        const sendFeatureFlagsOptions = typeof sendFeatureFlags === 'object' ? sendFeatureFlags : undefined;\n        return await this.getFeatureFlagsForEvent(distinctId, groups, disableGeoip, sendFeatureFlagsOptions);\n      }\n      if (event === '$feature_flag_called') {\n        // If we're capturing a $feature_flag_called event, we don't want to enrich the event with cached flags that may be out of date.\n        return {};\n      }\n      return {};\n    }).then(flags => {\n      // Derive the relevant flag properties to add\n      const additionalProperties = {};\n      if (flags) {\n        for (const [feature, variant] of Object.entries(flags)) {\n          additionalProperties[`$feature/${feature}`] = variant;\n        }\n      }\n      const activeFlags = Object.keys(flags || {}).filter(flag => flags?.[flag] !== false).sort();\n      if (activeFlags.length > 0) {\n        additionalProperties['$active_feature_flags'] = activeFlags;\n      }\n      return additionalProperties;\n    }).catch(() => {\n      // Something went wrong getting the flag info - we should capture the event anyways\n      return {};\n    }).then(additionalProperties => {\n      // No matter what - capture the event\n      _capture({\n        ...additionalProperties,\n        ...properties,\n        $groups: groups\n      });\n    });\n    await capturePromise;\n  }\n  identify({\n    distinctId,\n    properties,\n    disableGeoip\n  }) {\n    // Catch properties passed as $set and move them to the top level\n    // promote $set and $set_once to top level\n    const userPropsOnce = properties?.$set_once;\n    delete properties?.$set_once;\n    // if no $set is provided we assume all properties are $set\n    const userProps = properties?.$set || properties;\n    super.identifyStateless(distinctId, {\n      $set: userProps,\n      $set_once: userPropsOnce\n    }, {\n      disableGeoip\n    });\n  }\n  async identifyImmediate({\n    distinctId,\n    properties,\n    disableGeoip\n  }) {\n    // promote $set and $set_once to top level\n    const userPropsOnce = properties?.$set_once;\n    delete properties?.$set_once;\n    // if no $set is provided we assume all properties are $set\n    const userProps = properties?.$set || properties;\n    await super.identifyStatelessImmediate(distinctId, {\n      $set: userProps,\n      $set_once: userPropsOnce\n    }, {\n      disableGeoip\n    });\n  }\n  alias(data) {\n    super.aliasStateless(data.alias, data.distinctId, undefined, {\n      disableGeoip: data.disableGeoip\n    });\n  }\n  async aliasImmediate(data) {\n    await super.aliasStatelessImmediate(data.alias, data.distinctId, undefined, {\n      disableGeoip: data.disableGeoip\n    });\n  }\n  isLocalEvaluationReady() {\n    return this.featureFlagsPoller?.isLocalEvaluationReady() ?? false;\n  }\n  async waitForLocalEvaluationReady(timeoutMs = THIRTY_SECONDS) {\n    if (this.isLocalEvaluationReady()) {\n      return true;\n    }\n    if (this.featureFlagsPoller === undefined) {\n      return false;\n    }\n    return new Promise(resolve => {\n      const timeout = setTimeout(() => {\n        cleanup();\n        resolve(false);\n      }, timeoutMs);\n      const cleanup = this._events.on('localEvaluationFlagsLoaded', count => {\n        clearTimeout(timeout);\n        cleanup();\n        resolve(count > 0);\n      });\n    });\n  }\n  async getFeatureFlag(key, distinctId, options) {\n    const {\n      groups,\n      disableGeoip\n    } = options || {};\n    let {\n      onlyEvaluateLocally,\n      sendFeatureFlagEvents,\n      personProperties,\n      groupProperties\n    } = options || {};\n    const adjustedProperties = this.addLocalPersonAndGroupProperties(distinctId, groups, personProperties, groupProperties);\n    personProperties = adjustedProperties.allPersonProperties;\n    groupProperties = adjustedProperties.allGroupProperties;\n    // set defaults\n    if (onlyEvaluateLocally == undefined) {\n      onlyEvaluateLocally = false;\n    }\n    if (sendFeatureFlagEvents == undefined) {\n      sendFeatureFlagEvents = true;\n    }\n    let response = await this.featureFlagsPoller?.getFeatureFlag(key, distinctId, groups, personProperties, groupProperties);\n    const flagWasLocallyEvaluated = response !== undefined;\n    let requestId = undefined;\n    let flagDetail = undefined;\n    if (!flagWasLocallyEvaluated && !onlyEvaluateLocally) {\n      const remoteResponse = await super.getFeatureFlagDetailStateless(key, distinctId, groups, personProperties, groupProperties, disableGeoip);\n      if (remoteResponse === undefined) {\n        return undefined;\n      }\n      flagDetail = remoteResponse.response;\n      response = getFeatureFlagValue(flagDetail);\n      requestId = remoteResponse?.requestId;\n    }\n    const featureFlagReportedKey = `${key}_${response}`;\n    if (sendFeatureFlagEvents && (!(distinctId in this.distinctIdHasSentFlagCalls) || !this.distinctIdHasSentFlagCalls[distinctId].includes(featureFlagReportedKey))) {\n      if (Object.keys(this.distinctIdHasSentFlagCalls).length >= this.maxCacheSize) {\n        this.distinctIdHasSentFlagCalls = {};\n      }\n      if (Array.isArray(this.distinctIdHasSentFlagCalls[distinctId])) {\n        this.distinctIdHasSentFlagCalls[distinctId].push(featureFlagReportedKey);\n      } else {\n        this.distinctIdHasSentFlagCalls[distinctId] = [featureFlagReportedKey];\n      }\n      this.capture({\n        distinctId,\n        event: '$feature_flag_called',\n        properties: {\n          $feature_flag: key,\n          $feature_flag_response: response,\n          $feature_flag_id: flagDetail?.metadata?.id,\n          $feature_flag_version: flagDetail?.metadata?.version,\n          $feature_flag_reason: flagDetail?.reason?.description ?? flagDetail?.reason?.code,\n          locally_evaluated: flagWasLocallyEvaluated,\n          [`$feature/${key}`]: response,\n          $feature_flag_request_id: requestId\n        },\n        groups,\n        disableGeoip\n      });\n    }\n    return response;\n  }\n  async getFeatureFlagPayload(key, distinctId, matchValue, options) {\n    const {\n      groups,\n      disableGeoip\n    } = options || {};\n    let {\n      onlyEvaluateLocally,\n      sendFeatureFlagEvents,\n      personProperties,\n      groupProperties\n    } = options || {};\n    const adjustedProperties = this.addLocalPersonAndGroupProperties(distinctId, groups, personProperties, groupProperties);\n    personProperties = adjustedProperties.allPersonProperties;\n    groupProperties = adjustedProperties.allGroupProperties;\n    let response = undefined;\n    const localEvaluationEnabled = this.featureFlagsPoller !== undefined;\n    if (localEvaluationEnabled) {\n      // Try to get match value locally if not provided\n      if (!matchValue) {\n        matchValue = await this.getFeatureFlag(key, distinctId, {\n          ...options,\n          onlyEvaluateLocally: true,\n          sendFeatureFlagEvents: false\n        });\n      }\n      if (matchValue) {\n        response = await this.featureFlagsPoller?.computeFeatureFlagPayloadLocally(key, matchValue);\n      }\n    }\n    //}\n    // set defaults\n    if (onlyEvaluateLocally == undefined) {\n      onlyEvaluateLocally = false;\n    }\n    if (sendFeatureFlagEvents == undefined) {\n      sendFeatureFlagEvents = true;\n    }\n    // set defaults\n    if (onlyEvaluateLocally == undefined) {\n      onlyEvaluateLocally = false;\n    }\n    const payloadWasLocallyEvaluated = response !== undefined;\n    if (!payloadWasLocallyEvaluated && !onlyEvaluateLocally) {\n      response = await super.getFeatureFlagPayloadStateless(key, distinctId, groups, personProperties, groupProperties, disableGeoip);\n    }\n    return response;\n  }\n  async getRemoteConfigPayload(flagKey) {\n    if (!this.options.personalApiKey) {\n      throw new Error('Personal API key is required for remote config payload decryption');\n    }\n    const response = await this._requestRemoteConfigPayload(flagKey);\n    if (!response) {\n      return undefined;\n    }\n    const parsed = await response.json();\n    // The payload from the endpoint is stored as a JSON encoded string. So when we return\n    // it, it's effectively double encoded. As far as we know, we should never get single-encoded\n    // JSON, but we'll be defensive here just in case.\n    if (typeof parsed === 'string') {\n      try {\n        // If the parsed value is a string, try parsing it again to handle double-encoded JSON\n        return JSON.parse(parsed);\n      } catch (e) {\n        // If second parse fails, return the string as is\n        return parsed;\n      }\n    }\n    return parsed;\n  }\n  async isFeatureEnabled(key, distinctId, options) {\n    const feat = await this.getFeatureFlag(key, distinctId, options);\n    if (feat === undefined) {\n      return undefined;\n    }\n    return !!feat || false;\n  }\n  async getAllFlags(distinctId, options) {\n    const response = await this.getAllFlagsAndPayloads(distinctId, options);\n    return response.featureFlags || {};\n  }\n  async getAllFlagsAndPayloads(distinctId, options) {\n    const {\n      groups,\n      disableGeoip,\n      flagKeys\n    } = options || {};\n    let {\n      onlyEvaluateLocally,\n      personProperties,\n      groupProperties\n    } = options || {};\n    const adjustedProperties = this.addLocalPersonAndGroupProperties(distinctId, groups, personProperties, groupProperties);\n    personProperties = adjustedProperties.allPersonProperties;\n    groupProperties = adjustedProperties.allGroupProperties;\n    // set defaults\n    if (onlyEvaluateLocally == undefined) {\n      onlyEvaluateLocally = false;\n    }\n    const localEvaluationResult = await this.featureFlagsPoller?.getAllFlagsAndPayloads(distinctId, groups, personProperties, groupProperties, flagKeys);\n    let featureFlags = {};\n    let featureFlagPayloads = {};\n    let fallbackToFlags = true;\n    if (localEvaluationResult) {\n      featureFlags = localEvaluationResult.response;\n      featureFlagPayloads = localEvaluationResult.payloads;\n      fallbackToFlags = localEvaluationResult.fallbackToFlags;\n    }\n    if (fallbackToFlags && !onlyEvaluateLocally) {\n      const remoteEvaluationResult = await super.getFeatureFlagsAndPayloadsStateless(distinctId, groups, personProperties, groupProperties, disableGeoip, flagKeys);\n      featureFlags = {\n        ...featureFlags,\n        ...(remoteEvaluationResult.flags || {})\n      };\n      featureFlagPayloads = {\n        ...featureFlagPayloads,\n        ...(remoteEvaluationResult.payloads || {})\n      };\n    }\n    return {\n      featureFlags,\n      featureFlagPayloads\n    };\n  }\n  groupIdentify({\n    groupType,\n    groupKey,\n    properties,\n    distinctId,\n    disableGeoip\n  }) {\n    super.groupIdentifyStateless(groupType, groupKey, properties, {\n      disableGeoip\n    }, distinctId);\n  }\n  /**\r\n   * Reloads the feature flag definitions from the server for local evaluation.\r\n   * This is useful to call if you want to ensure that the feature flags are up to date before calling getFeatureFlag.\r\n   */\n  async reloadFeatureFlags() {\n    await this.featureFlagsPoller?.loadFeatureFlags(true);\n  }\n  async _shutdown(shutdownTimeoutMs) {\n    this.featureFlagsPoller?.stopPoller();\n    return super._shutdown(shutdownTimeoutMs);\n  }\n  async _requestRemoteConfigPayload(flagKey) {\n    if (!this.options.personalApiKey) {\n      return undefined;\n    }\n    const url = `${this.host}/api/projects/@current/feature_flags/${flagKey}/remote_config/`;\n    const options = {\n      method: 'GET',\n      headers: {\n        ...this.getCustomHeaders(),\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.options.personalApiKey}`\n      }\n    };\n    let abortTimeout = null;\n    if (this.options.requestTimeout && typeof this.options.requestTimeout === 'number') {\n      const controller = new AbortController();\n      abortTimeout = safeSetTimeout(() => {\n        controller.abort();\n      }, this.options.requestTimeout);\n      options.signal = controller.signal;\n    }\n    try {\n      return await this.fetch(url, options);\n    } catch (error) {\n      this._events.emit('error', error);\n      return undefined;\n    } finally {\n      if (abortTimeout) {\n        clearTimeout(abortTimeout);\n      }\n    }\n  }\n  extractPropertiesFromEvent(eventProperties, groups) {\n    if (!eventProperties) {\n      return {\n        personProperties: {},\n        groupProperties: {}\n      };\n    }\n    const personProperties = {};\n    const groupProperties = {};\n    for (const [key, value] of Object.entries(eventProperties)) {\n      // If the value is a plain object and the key exists in groups, treat it as group properties\n      if (isPlainObject(value) && groups && key in groups) {\n        const groupProps = {};\n        for (const [groupKey, groupValue] of Object.entries(value)) {\n          groupProps[String(groupKey)] = String(groupValue);\n        }\n        groupProperties[String(key)] = groupProps;\n      } else {\n        // Otherwise treat as person property\n        personProperties[String(key)] = String(value);\n      }\n    }\n    return {\n      personProperties,\n      groupProperties\n    };\n  }\n  async getFeatureFlagsForEvent(distinctId, groups, disableGeoip, sendFeatureFlagsOptions) {\n    // Use properties directly from options if they exist\n    const finalPersonProperties = sendFeatureFlagsOptions?.personProperties || {};\n    const finalGroupProperties = sendFeatureFlagsOptions?.groupProperties || {};\n    const flagKeys = sendFeatureFlagsOptions?.flagKeys;\n    // Check if we should only evaluate locally\n    const onlyEvaluateLocally = sendFeatureFlagsOptions?.onlyEvaluateLocally ?? false;\n    // If onlyEvaluateLocally is true, only use local evaluation\n    if (onlyEvaluateLocally) {\n      if ((this.featureFlagsPoller?.featureFlags?.length || 0) > 0) {\n        const groupsWithStringValues = {};\n        for (const [key, value] of Object.entries(groups || {})) {\n          groupsWithStringValues[key] = String(value);\n        }\n        return await this.getAllFlags(distinctId, {\n          groups: groupsWithStringValues,\n          personProperties: finalPersonProperties,\n          groupProperties: finalGroupProperties,\n          disableGeoip,\n          onlyEvaluateLocally: true,\n          flagKeys\n        });\n      } else {\n        // If onlyEvaluateLocally is true but we don't have local flags, return empty\n        return {};\n      }\n    }\n    // Prefer local evaluation if available (default behavior; I'd rather not penalize users who haven't updated to the new API but still want to use local evaluation)\n    if ((this.featureFlagsPoller?.featureFlags?.length || 0) > 0) {\n      const groupsWithStringValues = {};\n      for (const [key, value] of Object.entries(groups || {})) {\n        groupsWithStringValues[key] = String(value);\n      }\n      return await this.getAllFlags(distinctId, {\n        groups: groupsWithStringValues,\n        personProperties: finalPersonProperties,\n        groupProperties: finalGroupProperties,\n        disableGeoip,\n        onlyEvaluateLocally: true,\n        flagKeys\n      });\n    }\n    // Fall back to remote evaluation if local evaluation is not available\n    return (await super.getFeatureFlagsStateless(distinctId, groups, finalPersonProperties, finalGroupProperties, disableGeoip)).flags;\n  }\n  addLocalPersonAndGroupProperties(distinctId, groups, personProperties, groupProperties) {\n    const allPersonProperties = {\n      distinct_id: distinctId,\n      ...(personProperties || {})\n    };\n    const allGroupProperties = {};\n    if (groups) {\n      for (const groupName of Object.keys(groups)) {\n        allGroupProperties[groupName] = {\n          $group_key: groups[groupName],\n          ...(groupProperties?.[groupName] || {})\n        };\n      }\n    }\n    return {\n      allPersonProperties,\n      allGroupProperties\n    };\n  }\n  captureException(error, distinctId, additionalProperties) {\n    const syntheticException = new Error('PostHog syntheticException');\n    ErrorTracking.buildEventMessage(error, {\n      syntheticException\n    }, distinctId, additionalProperties).then(msg => {\n      this.capture(msg);\n    });\n  }\n  async captureExceptionImmediate(error, distinctId, additionalProperties) {\n    const syntheticException = new Error('PostHog syntheticException');\n    const evtMsg = await ErrorTracking.buildEventMessage(error, {\n      syntheticException\n    }, distinctId, additionalProperties);\n    return await this.captureImmediate(evtMsg);\n  }\n}\n\n// Portions of this file are derived from getsentry/sentry-javascript by Software, Inc. dba Sentry\n// Licensed under the MIT License\n// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re-written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\n// Copyright (c) 2013 Onur Can Cakmak onur.cakmak@gmail.com and all TraceKit contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files(the 'Software'), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n// merge, publish, distribute, sublicense, and / or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies\n// or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n  return line => {\n    const lineMatch = line.match(FULL_MATCH);\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n        platform: 'node:javascript'\n      };\n    }\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n        platform: 'node:javascript'\n      };\n    }\n    return undefined;\n  };\n}\n/**\r\n * Does this filename look like it's part of the app code?\r\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal = isNative || filename &&\n  // It's not internal if it's an absolute linux path\n  !filename.startsWith('/') &&\n  // It's not internal if it's an absolute windows path\n  !filename.match(/^[A-Z]:/) &&\n  // It's not internal if the path is starting with a dot\n  !filename.startsWith('.') &&\n  // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n  !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\nfunction createStackParser(getModule) {\n  const parsers = [nodeStackLineParser(getModule)];\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n  return (stack, skipFirstLines = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      if (line.length > 1024) {\n        continue;\n      }\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n      if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n        break;\n      }\n    }\n    return reverseAndStripFrames(frames);\n  };\n}\nfunction reverseAndStripFrames(stack) {\n  if (!stack.length) {\n    return [];\n  }\n  const localStack = Array.from(stack);\n  localStack.reverse();\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION\n  }));\n}\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\n\nErrorTracking.stackParser = createStackParser(createGetModuleFromFilename());\nErrorTracking.frameModifiers = [addSourceContext];\nclass PostHog extends PostHogBackendClient {\n  getLibraryId() {\n    return 'posthog-node';\n  }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/posthog-node/lib/node/index.mjs\n");

/***/ })

};
;